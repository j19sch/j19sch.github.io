@startuml

<style>
legend {
	FontSize 16
	Margin 10 10 50 10
	Padding 10
}
</style>

' FontSize 30
' BackGroundColor yellow
' Padding 60

skinparam dpi 150

skinparam componentStyle rectangle

'skinparam linetype polyline

' https://plantuml.com/skinparam
' https://plantuml.com/commons
' https://plantuml.com/component-diagram
' https://www.augmentedmind.de/2021/01/17/plantuml-layout-tutorial-styles/

' generate image
' java -jar ~/Downloads/plantuml-1.2023.8.jar clj-diagram.txt

' notes
' row-num not called by anything ??? fixed!

' function calling function calling function inside a defn
'arity overloading
' tri*
' get-input

legend bottom right
' option: use table
	regular font: function
	//italicized font//: variable
	arrow: calls
	thick blue arrow: setup
	thick purple arrow: main game loop
	dashed line: call with side effects
	<color:maroon> maroon<color:black>: takes 'board' as param

end legend


interface "read-line" as readline
interface println
interface "System/exit" as systemexit


frame "create the board" {
	[tri*]
	[ //tri// ]
	[triangular?]
	[row-tri]
	[row-num]
	[in-bounds?]
	[ <color:maroon> connect ]
	[ <color:maroon> connect-right ]
	[ <color:maroon> connect-down-left ]
	[ <color:maroon> connect-down-right ]
	[ <color:maroon> add-pos ]
	[new-board]
}

frame "move pegs" {
	[ <color:maroon> pegged? ]
	[ <color:maroon> valid-moves ]
	[ <color:maroon> valid-move? ]
	[ <color:maroon> remove-peg ]
	[ <color:maroon> place-peg ]
	[ <color:maroon> move-peg ]
	[ <color:maroon> make-move ]
	[ <color:maroon> can-move? ]
}

frame "represent board textually and print it" {
	'not functions
	[ //alpha-start// ]
	[ //alpha-end// ]
	[ //letters// ]
	[ //pos-chars// ]
	[ //ansi-styles// ]

	'functions again
	[ansi]
	[colorize]
	[ <color:maroon> render-pos ]
	[row-positions]
	[row-padding]
	[ <color:maroon> render-row ]
	[ <color:maroon> print-board ]
}


frame "interaction" {
	[letter->pos]
	[get-input]
	[characters-as-strings]
	[ <color:maroon> prompt-move ]
	[ <color:maroon> successful-move ]
	[ <color:maroon> game-over ]
	[ <color:maroon> prompt-empty-peg ]
	[prompt-rows]
	[-main]
}


'''
'calls
'''

'create the board
[tri*] --> [tri*]
[ //tri// ] --> [tri*]
[row-tri] --> [ //tri// ]
[row-num] --> [ //tri// ]
[ <color:maroon> connect ] --> [in-bounds?]
[ <color:maroon> connect-right ] --> [triangular?]
[ <color:maroon> connect-right ] --> [ <color:maroon> connect ]
[ <color:maroon> connect-down-left ] --> [ <color:maroon> connect ]
[ <color:maroon> connect-down-left ] --> [row-num]
[ <color:maroon> connect-down-right ] --> [ <color:maroon> connect ]
[ <color:maroon> connect-down-right ] --> [row-num]
[ <color:maroon> add-pos ] --> [ <color:maroon> connect-right ]
[ <color:maroon> add-pos ] --> [ <color:maroon> connect-down-left ]
[ <color:maroon> add-pos ] --> [ <color:maroon> connect-down-right ]
[new-board] --> [row-tri]
[new-board] --> [ <color:maroon> add-pos ]

'move pegs
[ <color:maroon> valid-moves ] --> [ <color:maroon> pegged? ]
[ <color:maroon> valid-move? ] --> [ <color:maroon> valid-moves ]
[ <color:maroon> move-peg ] --> [ <color:maroon> remove-peg ]
[ <color:maroon> move-peg ] --> [ <color:maroon> place-peg ]
[ <color:maroon> make-move ] --> [ <color:maroon> valid-move? ]
[ <color:maroon> make-move ] --> [ <color:maroon> move-peg ]
[ <color:maroon> make-move ] --> [ <color:maroon> remove-peg ]
[ <color:maroon> can-move? ] --> [ <color:maroon> valid-moves ]

'represent board textually and print it
[ //letters// ] --> [ //alpha-start// ]
[ //letters// ] --> [ //alpha-end// ]
[ansi] --> [ //ansi-styles// ]
[colorize] --> [ansi]
[ <color:maroon> render-pos ] --> [ //letters// ]
[ <color:maroon> render-pos ] --> [colorize]
[row-positions] -left-> [row-tri]
[row-positions] -left-> [row-num]
[row-padding] --> [ //pos-chars// ]
[row-padding] -left-> [row-num]
[ <color:maroon> render-row ] --> [row-padding]
[ <color:maroon> render-row ] --> [ <color:maroon> render-pos ]
[ <color:maroon> render-row ] -> [row-num]
[ <color:maroon> render-row ] --> [row-positions]
[ <color:maroon> print-board ] --> [ <color:maroon> render-row ]
[ <color:maroon> print-board ] -left-> [row-num]
[ <color:maroon> print-board ] ..> println

'interaction
[letter->pos] -> [ //alpha-start// ]
[get-input] --> [get-input]
[get-input] ..> readline
[ <color:maroon> prompt-move ] ..> println
[ <color:maroon> prompt-move ] -> [ <color:maroon> print-board ]
[ <color:maroon> prompt-move ] --> [letter->pos]
[ <color:maroon> prompt-move ] --> [characters-as-strings]
[ <color:maroon> prompt-move ] --> [get-input]
[ <color:maroon> prompt-move ] -> [ <color:maroon> make-move ]
[ <color:maroon> prompt-move ] -[thickness=4,#darkorchid]-> [ <color:maroon> successful-move ]
[ <color:maroon> prompt-move ] --> [ <color:maroon> prompt-move ]
[ <color:maroon> successful-move ] -> [ <color:maroon> can-move? ]
[ <color:maroon> successful-move ] -[thickness=4,#darkorchid]-> [ <color:maroon> prompt-move ]
[ <color:maroon> successful-move ] -[thickness=4,#darkorchid]-> [ <color:maroon> game-over ]
[ <color:maroon> game-over ] ..> println
[ <color:maroon> game-over ] -> [ <color:maroon> print-board ]
[ <color:maroon> game-over ] --> [get-input]
[ <color:maroon> game-over ] -up-> [prompt-rows]
[ <color:maroon> game-over ] ..> systemexit
[ <color:maroon> prompt-empty-peg ] ..> println
[ <color:maroon> prompt-empty-peg ] -> [ <color:maroon> print-board ]
[ <color:maroon> prompt-empty-peg ] -down[thickness=3,#navy]-> [ <color:maroon> prompt-move ]
[ <color:maroon> prompt-empty-peg ] -> [ <color:maroon> remove-peg ]
[ <color:maroon> prompt-empty-peg ] --> [letter->pos]
[ <color:maroon> prompt-empty-peg ] --> [get-input]
[prompt-rows] ..> println
[prompt-rows] --> [get-input]
[prompt-rows] -> [new-board]
[prompt-rows] -down[thickness=3,#navy]-> [ <color:maroon> prompt-empty-peg ]
[-main] ..> println
[-main] -down[thickness=3,#navy]-> [prompt-rows]

@enduml


