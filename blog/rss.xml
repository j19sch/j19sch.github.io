<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes</title><link>https://smallsheds.garden/</link><description>Joep Schuurkes</description><atom:link href="https://smallsheds.garden/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:j19sch@hey.com"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="https://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://licensebuttons.net/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sun, 17 Jul 2022 09:59:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Three thoughts on risk-basked testing</title><link>https://smallsheds.garden/blog/2022/three-thoughts-on-risk-based-testing/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;The past month I've been thinking about risk-based testing. This post collects three thoughts on risk-based testing I kept returning to.&lt;/p&gt;
&lt;h2&gt;If not based on risks, then based on what?&lt;/h2&gt;
&lt;p&gt;About a month ago I &lt;a href="https://twitter.com/j19sch/status/1533760354647523330"&gt;tweeted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the alternatives to risk-based testing?&lt;br&gt;
Requirements-based? I'd argue that's a subset of risk-based.&lt;br&gt;
Unguided? That's either a bad idea ("we hope to get lucky") or aimed at the risk of unknown unknowns.&lt;br&gt;
Any other options? Because something about the term is bothering me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My question was inspired by the &lt;a href="https://smallsheds.garden/slides/rtc2019-testing-types.html#/15/0/1"&gt;"opposite" heuristic&lt;/a&gt; from my talk about &lt;a href="https://smallsheds.garden/slides/rtc2019-testing-types.html#/"&gt;testing types&lt;/a&gt;: if we have some kind of category, what's the name for the things not in that category? Applied to risk-based testing: what's the name for testing that's not risk-based?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/three-thoughts-on-risk-based-testing/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>coverage</category><category>software testing</category><category>test management</category><category>test strategy</category><guid>https://smallsheds.garden/blog/2022/three-thoughts-on-risk-based-testing/</guid><pubDate>Sun, 17 Jul 2022 09:56:30 GMT</pubDate></item><item><title>(clj 10) The mapify function of (clj 9) revisited</title><link>https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In my &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/"&gt;previous Clojure post&lt;/a&gt; I covered the code example at the end of Chapter 4 of &lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;"Clojure for the Brave and True"&lt;/a&gt;. Or rather, I focused on a single function in the example, called &lt;code&gt;mapify&lt;/code&gt;, and described how I figured out what it does. At the &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/#the-mapify-function"&gt;end of that post&lt;/a&gt; I shared my disappointment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Having done all this work (and writing) I can't help but feel a bit disappointed. In the end, the function does not seem to do a lot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I shared a Python version of that same function, claiming that it basically does the same thing&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, less than a week after publishing the post, I got a very kind email by someone named Martin. And &lt;em&gt;"in defence of clojure and to maybe reduce your disappointment"&lt;/em&gt; Martin pointed out the two versions are not as equivalent as I claimed, because the Clojure version is more general than the Python version. So I looked at the two version again and the way they are different turned out to be quite interesting - interesting enough to write a follow-up post.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/</guid><pubDate>Wed, 13 Jul 2022 19:02:36 GMT</pubDate></item><item><title>(clj 9) How to figure out what a function does</title><link>https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Chapter 4 of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;" concludes with a &lt;em&gt;Vampire Data Analysis Program&lt;/em&gt;, serving as a summary of the chapter. The book shows some code, explains it, moves on to the next bit of code, etc. I'm not sure why, but I decided I wanted to figure out the code on my own and then read the explanation to see if I got it right. Afterwards I realized it might make a good blog post: both explaining what the program does and what techniques (for lack of a better word) I used to figure it out.&lt;/p&gt;
&lt;p&gt;With most of the work in the program being done by a function called &lt;code&gt;mapify&lt;/code&gt;, this blog post will focus on that single function. As it turns out, it took me more than 2000 words (footnotes not included) to describe what this function consisting of only 9 lines does. So feel free to read all of it, skim through it, or skip straight ahead to the &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/#techniques"&gt;techniques&lt;/a&gt; and some &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/#reflections"&gt;reflections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/</guid><pubDate>Sun, 12 Jun 2022 13:01:36 GMT</pubDate></item><item><title>(clj 8) Some notes on lazy sequences and function parameters</title><link>https://smallsheds.garden/blog/clojure/2022/clj-8-some-notes-on-lazy-sequences-and-function-parameters/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Almost done with the chapter 4 &lt;em&gt;"Core Functions in Depth"&lt;/em&gt; of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;"! Before wrapping up the chapter with a longer example, a summary, and some exercises, the book goes into lazy sequences, the collection abstraction, and function functions. In this post I will share some notes on infinite lazy sequences and function parameters, making comparisons between Clojure and Python.&lt;/p&gt;
&lt;h2&gt;Infinite lazy sequences&lt;/h2&gt;
&lt;p&gt;A lazy sequence is a sequence whose members aren't computed until you try to access them. One advantage is that it's more efficient: the whole sequence doesn't have to be calculated and kept in memory from the start. Another advantage is that it allows you to create infinite sequences. Do that with a normal sequence and your program would never want to stop calculating.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-8-some-notes-on-lazy-sequences-and-function-parameters/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://smallsheds.garden/blog/clojure/2022/clj-8-some-notes-on-lazy-sequences-and-function-parameters/</guid><pubDate>Mon, 18 Apr 2022 12:16:36 GMT</pubDate></item><item><title>Structuring group discussions with K-cards</title><link>https://smallsheds.garden/blog/2022/structuring-group-discussions-with-k-cards/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2022/k-cards/k-cards.jpeg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;K-cards are often used at peer conferences to facilitate the discussion after someone has presented their experience report. Some people really hate them. In my experience they're a great tool to enable rich conversations. Since the facilitator uses the K-cards to structure the discussion in threads, K-cards allow the group to drill down to the details of the experience report. This instead of the conversation jumping around as person 1 broaches topic A, person 2 introduces topic B, and person 3 wants to return to topic A.&lt;/p&gt;
&lt;p&gt;The explanation of these K-cards often takes the form of &lt;em&gt;"This is what each card means."&lt;/em&gt; instead of &lt;em&gt;"This is when to use this card for what purpose."&lt;/em&gt; And despite the elegance of the K-cards system, when you learn about them during the opening of a peer conference, it's a lot of information to digest. So I hope this blog post will be useful as a written explanation of how to use K-cards.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/structuring-group-discussions-with-k-cards/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>facilitation</category><category>peer conference</category><guid>https://smallsheds.garden/blog/2022/structuring-group-discussions-with-k-cards/</guid><pubDate>Fri, 25 Mar 2022 17:27:30 GMT</pubDate></item><item><title>Uncovering Agile micro-skills at FroGS conf</title><link>https://smallsheds.garden/blog/2022/uncovering-agile-micro-skills-at-frogsconf/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;At the second &lt;a href="https://frogsconf.nl/"&gt;FroGS conf Open Space&lt;/a&gt; on 12 March 2022 I facilitated a session based on my blog post &lt;a href="https://smallsheds.garden/blog/2022/four-skills-to-embody-the-four-agile-values/"&gt;&lt;em&gt;"Four skills to embody the four Agile values"&lt;/em&gt;&lt;/a&gt;. My goal with the session was to uncover more Agile (micro-)skills. In this post I'll share what we did during the session and I'll close off with some thoughts on the biggest challenge of this exercise: too many skills. Before I start however, a big thank you to everyone who participated in the session!&lt;/p&gt;
&lt;h2&gt;What we value&lt;/h2&gt;
&lt;p&gt;I opened the session with asking people to add stickies to the board of things they valued in Agile software development. When was I preparing the Miro board before the session, I labeled this part of the board "values". Then I remembered I had decided earlier to label it "what we value", so as to avoid the discussion about what values are and aren't. The topic did come up (i.e. the relation between values, ethics and morals), so I was glad I could respond by saying it's a great topic, but not for this session.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/uncovering-agile-micro-skills-at-frogsconf/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>conference</category><category>skills</category><category>values</category><guid>https://smallsheds.garden/blog/2022/uncovering-agile-micro-skills-at-frogsconf/</guid><pubDate>Mon, 14 Mar 2022 15:56:09 GMT</pubDate></item><item><title>Four skills to embody the four Agile values</title><link>https://smallsheds.garden/blog/2022/four-skills-to-embody-the-four-agile-values/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;If you're familiar with the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt;, you're familiar with its four values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Individuals and interactions over processes and tools&lt;/li&gt;
&lt;li&gt;Working software over comprehensive documentation&lt;/li&gt;
&lt;li&gt;Customer collaboration over contract negotiation&lt;/li&gt;
&lt;li&gt;Responding to change over following a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recently this made me wonder: how do you apply these values? How do you live them? What skills do you need to embody them? In this post I won't be sharing any definitive or complete answers, but as a starting point I have identified four skills needed to embody the four Agile values.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/four-skills-to-embody-the-four-agile-values/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>skills</category><category>values</category><guid>https://smallsheds.garden/blog/2022/four-skills-to-embody-the-four-agile-values/</guid><pubDate>Sun, 06 Feb 2022 16:04:06 GMT</pubDate></item><item><title>From tension to agreement with Sociocracy 3.0</title><link>https://smallsheds.garden/blog/2022/from-tension-to-agreement-with-sociocracy-30/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Earlier this month I started my new job at a small consultancy. During my onboarding I noticed something that I thought could be improved. So I figured I should come up with a proposal to address that. It also made me wonder how me proposing this improvement would go over with my new colleagues. And then I remembered I learned about a good way of doing this in a workshop&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/from-tension-to-agreement-with-sociocracy-30/#fn:6"&gt;1&lt;/a&gt;&lt;/sup&gt; at the 2016 &lt;a href="https://xpdaysbenelux.nl/"&gt;XP Days Benelux&lt;/a&gt; conference. That workshop was about &lt;a href="https://sociocracy30.org/"&gt;Sociocracy 3.0&lt;/a&gt; (S3 for short). So I ended up proposing two things in the meeting: my improvement, but also a way to come to an agreement about my proposal.&lt;/p&gt;
&lt;p&gt;The reactions to my proposal about how to come to agreements, were mostly positive. One person asked a very good question though: &lt;em&gt;"Is this solving a problem we are having? Or is this a solution looking for a problem? What would be the reasons for adopting this?"&lt;/em&gt; In response I expanded on my reasons for wanting this and we decided to give it a try. My dual proposal helped here: let's try the S3 patterns I shared on the improvement I proposed.&lt;/p&gt;
&lt;p&gt;Looking back, I'm happy with my reply to those questions and I also feel I can do better. Which makes this the perfect opportunity for my first blog post of 2022. I'll start with a brief introduction on Sociocracy 3.0, then I'll share the proposal I made based on S3, and finally I'll talk about why I like this form of decision-making.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/from-tension-to-agreement-with-sociocracy-30/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>leadership</category><category>self-organization</category><category>sociocracy 3.0</category><guid>https://smallsheds.garden/blog/2022/from-tension-to-agreement-with-sociocracy-30/</guid><pubDate>Sat, 22 Jan 2022 10:27:13 GMT</pubDate></item><item><title>Site analytics: if you have two watches...</title><link>https://smallsheds.garden/blog/2021/site-analytics-if-you-have-two-watches/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;When I moved my blog to this site, I added &lt;a href="https://clicky.com/"&gt;Clicky&lt;/a&gt; as a privacy-friendly way to collect analytics. About a month ago I added &lt;a href="https://plausible.io/"&gt;Plausible&lt;/a&gt; analytics, because I wanted to compare the two.&lt;/p&gt;
&lt;p&gt;My reasons to consider an alternative to Clicky, and Plausible in particular, were varied. Plausible looks nicer. Clicky's free plan only lets you track one site, I want analytics for this site and for my &lt;a href="https://context-of-agile.org/"&gt;Context of Agile&lt;/a&gt; site. I'd like to have more than 30 days of history for my data. Those last two wishes require a paid plan (regardless if Clicky or Plausible) and Plausible is cheaper than Clicky.&lt;/p&gt;
&lt;p&gt;So I got a 30-day trial with Plausible, added its script to my site, while Clicky also kept collecting data. With the trial now over, it's time to take a look at the data they both collected over the period from 28 November to 27 December 2021. I've added some thoughts after each table with data and at the end of this post I've added some more general thoughts.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2021/site-analytics-if-you-have-two-watches/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>site</category><guid>https://smallsheds.garden/blog/2021/site-analytics-if-you-have-two-watches/</guid><pubDate>Tue, 28 Dec 2021 10:08:16 GMT</pubDate></item><item><title>(clj 7) Programming to abstractions with sequence functions</title><link>https://smallsheds.garden/blog/clojure/2021/clj7-programming-to-abstractions-with-sequence-functions/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Looking at my progress so far, I realized it's time re-evaluate this whole learning Clojure-thing. After looking through the table of contents of "&lt;a href="https://www.braveclojure.com/"&gt;Clojure for the Brave and True&lt;/a&gt;" and giving it some thought, I decided to make two changes to how I'll proceed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I will start writing shorter posts and write them more often.&lt;/li&gt;
&lt;li&gt;My goal is to finish &lt;em&gt;"Part II: Language Fundamentals"&lt;/em&gt;. I don't have to do &lt;em&gt;"Part III: Advanced Topics"&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Completing Part II will still take quite some work. I've worked through the two first sections of chapter 4 (5 sections left in that chapter) and Part II goes up to chapter 8. So no time to waste: let's take a look at sequence functions and programming to abstractions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2021/clj7-programming-to-abstractions-with-sequence-functions/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://smallsheds.garden/blog/clojure/2021/clj7-programming-to-abstractions-with-sequence-functions/</guid><pubDate>Sun, 05 Dec 2021 12:40:36 GMT</pubDate></item></channel></rss>