<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes</title><link>https://j19sch.github.io/</link><description>Joep Schuurkes</description><atom:link href="https://j19sch.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:j19sch@hey.com"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sun, 28 Nov 2021 21:06:25 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to run a remote Elephant Carpaccio</title><link>https://j19sch.github.io/blog/2021/how-to-run-a-remote-elephant-carpaccio/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In a &lt;a href="https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/"&gt;previous post&lt;/a&gt; I promised to write a blog post on how I would run remote &lt;a href="https://web.archive.org/web/20171114154855/http://alistair.cockburn.us/Elephant+Carpaccio+exercise"&gt;Elephant Carpaccio&lt;/a&gt; if I get the opportunity to run it a third time. This is that post, but not exactly. In the mean time I got the opportunity to run the workshop one more time. That gave me the opportunity to try out some new things and write this blog post on how to run a remote Elephant Carpaccio.&lt;/p&gt;
&lt;p&gt;I should be clear on one thing, though. This post is not a full facilitation guide. It can't be with the limited experience I have. I do hope and think that reading the official(?) &lt;a href="https://docs.google.com/document/d/1TCuuu-8Mm14oxsOnlk8DqfZAA1cvtYu9WGv67Yj_sSk/pub"&gt;facilitation guide&lt;/a&gt; and this blog post, gives you a solid base to start running the Elephant Carpaccio exercise remotely yourself.&lt;/p&gt;
&lt;h3&gt;The preparation&lt;/h3&gt;
&lt;p&gt;Take your time to prep. Taking &lt;a href="https://j19sch.github.io/blog/2021/lessons-learned-after-facilitating-elephant-carpaccio/#take-your-time-for-the-before-and-after"&gt;as much time as the duration&lt;/a&gt; of the workshop is a good start. (That's assuming you are already familiar with the Elephant Carpaccio exercise, though. So if you're not, do that first.) Get a clear picture in your head what you want to achieve with the workshop. Run through it in your mind in detail. Decide which options you have in which parts of the workshop to make changes as the workshop happens.&lt;/p&gt;
&lt;p&gt;Set up all the practical stuff: the invite, the video conferencing link, the virtual whiteboard. How early you do this, depends on how much you expect participants to do before the actual workshop. Since it's a remote workshop my advice is to have them to do as much in advance as possible. I've had good experiences with asking participants to do two things in advance.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/how-to-run-a-remote-elephant-carpaccio/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>elephant carpaccio</category><category>facilitation</category><category>slices</category><category>workshop</category><guid>https://j19sch.github.io/blog/2021/how-to-run-a-remote-elephant-carpaccio/</guid><pubDate>Sun, 28 Nov 2021 12:35:16 GMT</pubDate></item><item><title>Lessons learned after facilitating remote Elephant Carpaccio</title><link>https://j19sch.github.io/blog/2021/lessons-learned-after-facilitating-elephant-carpaccio/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In my &lt;a href="https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/"&gt;previous blog post&lt;/a&gt; I shared my experience of facilitating remote Elephant Carpaccio  twice. In this second post I want to share some things I learned through that experience that apply to facilitating remote experiential workshops in general.&lt;/p&gt;
&lt;h3&gt;The facilitation guide&lt;/h3&gt;
&lt;p&gt;The Elephant Carpaccio exercise has a detailed &lt;a href="https://docs.google.com/document/d/1TCuuu-8Mm14oxsOnlk8DqfZAA1cvtYu9WGv67Yj_sSk/pub"&gt;facilitation guide&lt;/a&gt;, created by &lt;a href="https://twitter.com/henrikkniberg"&gt;Henrik Kniberg&lt;/a&gt; and &lt;a href="https://twitter.com/totheralistair"&gt;Alistair Cockburn&lt;/a&gt; (also inventor of the exercise). This guide really is a blessing and a curse. It's great to have guidance on how to run the exercise. However, there's also only so much such a guide can do. As I was writing the blog post of me running the exercise twice, I looked at the facilitation guide again, and it made so much more sense to me. Instead of it being instructions about something new, I could connect the contents to my own experiences. And that experience does make me wonder how advisable it is to facilitate an exercise you have never done or seen based on a luckily excellent and very detailed faciliation guide.&lt;/p&gt;
&lt;p&gt;The level of detail in the facilitation guide also had me walk into the trap of relying on it too much. Instead of taking my own context fully into account, I though I could follow the guide with a few tweaks. As you could read in my &lt;a href="https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/"&gt;previous post&lt;/a&gt;, the first time I ran the exercise, it got away from me a little. In this sense I find it interesting that Oliver Spann seems to have had &lt;a href="https://medium.com/@olivercecilspann/elephant-carpaccio-exercise-an-experience-report-207f0cc79c34"&gt;a similar experience&lt;/a&gt; facilitating Elephant Carpaccio for the first time:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/lessons-learned-after-facilitating-elephant-carpaccio/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>elephant carpaccio</category><category>facilitation</category><category>workshop</category><guid>https://j19sch.github.io/blog/2021/lessons-learned-after-facilitating-elephant-carpaccio/</guid><pubDate>Sun, 24 Oct 2021 15:36:50 GMT</pubDate></item><item><title>Two times remote Elephant Carpaccio</title><link>https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;A while ago I asked the teams in my department which parts of agile software development they wanted to learn more about. One of the topics that stood out, was: you have a high-level description of a new feature, then what? That's still quite a wide topic, so the question become on what part of that problem would I focus first.&lt;/p&gt;
&lt;p&gt;Quite quickly I settled on feature slicing - for several reasons. First of all, I had noticed teams delivering somewhat big chunks of functionality, split up into development tasks instead of vertical slices. Secondly, a team I had worked with on feature slicing, had gained some valuable planning flexibility because of it. And they continued the practice, breaking up projects vertically. Finally, I was aware that there was a workshop called "Elephant Carpaccio", focused on feature slicing. So I could use that, or build on it, but at least I wouldn't have to come up with something from scratch.&lt;/p&gt;
&lt;h3&gt;The Elephant Carpaccio exercise&lt;/h3&gt;
&lt;p&gt;The Elephant Carpaccio exercise was invented by Alistair Cockburn&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Its purpose is to get people to practice &lt;em&gt;"nano-incremental"&lt;/em&gt; development, i.e. slicing something small enough you can program it in 15-30 minutes. The exercise tries to bring home its point through exageration: you are asked to slice a very simple application in 15-20 slices, where you would normally do it in 2-3 slices. Then you get five iterations of 8 minutes to build those slices. To me that's the coolest part of the exercise: you actually get to experience what's it like to work with such small slices. As Alistair Cockburn himself says about the exercise: &lt;em&gt;"the true learning is the actual programming section"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>elephant carpaccio</category><category>facilitation</category><category>slices</category><category>workshop</category><guid>https://j19sch.github.io/blog/2021/two-times-remote-elephant-carpaccio/</guid><pubDate>Sun, 03 Oct 2021 19:28:50 GMT</pubDate></item><item><title>(clj 6) Three chapters in one year</title><link>https://j19sch.github.io/blog/clojure/2021/clj6-three-chapters-in-one-year/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;It's been a bit more than a year since I posted my &lt;a href="https://j19sch.github.io/blog/clojure/2020/clj0-diving-straight-in/"&gt;first blog post&lt;/a&gt; about learning Clojure. And it's been five months since my &lt;a href="https://j19sch.github.io/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/"&gt;last blog post&lt;/a&gt; about it. So far I've made it through the first three chapters&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/clojure/2021/clj6-three-chapters-in-one-year/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;". Instead of commenting on my learning pace at the start of every post, I've decided that this pace is the pace that works for me at this time, so there's no need to keep revisiting the topic.&lt;/p&gt;
&lt;p&gt;Something I do want to mention is that one thing that triggered me to do some more Clojure was &lt;a href="https://itrevolution.com/the-idealcast-episode-10/"&gt;this episode&lt;/a&gt; of Gene Kim's excellent &lt;a href="https://itrevolution.com/the-idealcast-podcast/"&gt;Idealcast&lt;/a&gt; podcast with &lt;a href="https://www.michaelnygard.com/"&gt;Michael Nygard&lt;/a&gt;, in which they spend some time talking about Clojure.&lt;/p&gt;
&lt;h3&gt;Vim macros&lt;/h3&gt;
&lt;p&gt;The exercises at the end of chapter 3 got me to try out a lot of things, so I got bored having to type in the commands to copy a line (&lt;code&gt;yy&lt;/code&gt;), paste it (&lt;code&gt;p&lt;/code&gt;), replace it by its evaluation (&lt;code&gt;c!$&lt;/code&gt;), comment it out (&lt;code&gt;gcc&lt;/code&gt;), and add a "&lt;code&gt;=&amp;gt;&lt;/code&gt;" to mark it as output. So I learned about Vim macros and recorded that sequence to run when I hit &lt;code&gt;@c&lt;/code&gt;. At the end of my &lt;a href="https://j19sch.github.io/blog/clojure/2020/clj4-learning-when-maps-closures/"&gt;(clj 4)&lt;/a&gt; post I mentioned I might have to do this. Guess that moment came sooner than I expected.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/clojure/2021/clj6-three-chapters-in-one-year/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://j19sch.github.io/blog/clojure/2021/clj6-three-chapters-in-one-year/</guid><pubDate>Sat, 08 May 2021 08:53:25 GMT</pubDate></item><item><title>An approach to teaching Agile 20 years after the Agile Manifesto</title><link>https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;For a few weeks I've been thinking about how I would teach Agile&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; in 2021, 20 years after the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; was published. After sharing my thoughts at &lt;a href="https://citconf.com/virtual2021/"&gt;CitCon Europe 2021 Virtual&lt;/a&gt; and having an interesting conversation about the state of Agile and how to teach it, I feel it's time to share my thoughts here as well.&lt;/p&gt;
&lt;h3&gt;Why I started thinking about this&lt;/h3&gt;
&lt;p&gt;As Allan Kelly stated in a &lt;a href="https://www.allankellyassociates.co.uk/archives/2762/agile-won-the-war-but-lost-the-peace/"&gt;2018 blog post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Agile won the war but lost the peace."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everyone is doing Agile, even though very few people are living the dream promised by Agile. This makes it very difficult to use "Agile" as a label, as a name for something. When someone says "Agile", are they referring to what you're already doing or to something they think you should be doing?&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; was &lt;a href="https://agilemanifesto.org/history.html"&gt;written in 2001&lt;/a&gt;, based on what its authors were doing in the 1990s in response to the common ways of doing software development of that time. And since the Manifesto we've seen the introduction of Lean, of DevOps, and of CI/CD. So the amount of history that comes with Agile is large and it raises the question how much (if any) we should teach - especially since a lot of it is folklore instead of history&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Doing Agile's history justice would probably cost more time than makes sense if your goal is to teach people how to develop software in an Agile way&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. And a lot of that history was a relatively long time ago, which is why I titled my CitCon session "Teaching Agile to people younger than the Manifesto".&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>ci/cd</category><category>devops</category><category>lean</category><category>teaching</category><guid>https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/</guid><pubDate>Mon, 26 Apr 2021 14:54:34 GMT</pubDate></item><item><title>Thinking about quality: so what to do?</title><link>https://j19sch.github.io/blog/2021/thinking-about-quality-so-what-to-do/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;On 30 January 2021 I participated in the Quality Acceleration Peer Conference organized by Huib Schoots and Joost Voskuil. Participants were &lt;a href="https://twitter.com/alanpage"&gt;Alan Page&lt;/a&gt;, &lt;a href="https://twitter.com/unremarkableQA"&gt;Areti Panou&lt;/a&gt;, &lt;a href="https://twitter.com/northern_tester"&gt;Ash Winter&lt;/a&gt;, &lt;a href="https://twitter.com/btknaack"&gt;Bart Knaack&lt;/a&gt;, &lt;a href="https://twitter.com/conorfi"&gt;Conor Fitzgerald&lt;/a&gt;, &lt;a href="https://twitter.com/roukedejong"&gt;Rouke de Jong&lt;/a&gt;, &lt;a href="https://twitter.com/gwendiagram"&gt;Gwen Diagram&lt;/a&gt;, &lt;a href="https://twitter.com/gdinwiddie"&gt;George Dinwiddie&lt;/a&gt;, &lt;a href="https://twitter.com/janetgregoryca"&gt;Janet Gregory&lt;/a&gt;, &lt;a href="https://twitter.com/joost_voskuil"&gt;Joost Voskuil&lt;/a&gt;, &lt;a href="https://twitter.com/jpjwolli"&gt;Joost van Wollingen&lt;/a&gt;, &lt;a href="https://twitter.com/mmeijeri"&gt;Martijn Meijering&lt;/a&gt;, &lt;a href="https://twitter.com/robmeaney"&gt;Rob Meaney&lt;/a&gt;, &lt;a href="https://twitter.com/vinwijnl"&gt;Vincent Wijnen&lt;/a&gt; - with &lt;a href="https://twitter.com/huibschoots"&gt;Huib Schoots&lt;/a&gt; facilitating the peer conference. The main topics mentioned in the invite were: "How can you sell quality?", "How can you convince people that quality can accelerate software delivery?", and "What limitations or barriers do you hit?"&lt;/p&gt;
&lt;p&gt;Reflecting during and after our discussions on these topics, I realized there are some interesting things going on about how we talk about quality and how to sell it. Enough interesting things to fill more than one blog post, so this will be a four-part series. And I might expand on some ideas in the series after that.&lt;/p&gt;
&lt;p&gt;The first three parts covered rather philosophical topics: &lt;a href="https://j19sch.github.io/blog/2021/choosing-your-value-system/"&gt;choosing your value system&lt;/a&gt;, &lt;a href="https://j19sch.github.io/blog/2021/who-doesnt-want-quality/"&gt;exploring what it means to sell quality&lt;/a&gt;, and &lt;a href="https://j19sch.github.io/blog/2021/management-paradigms-and-quality/"&gt;how management paradigms affect quality&lt;/a&gt;. At the end of the third post I brought up the main question for this fourth and last post: so now what? If you expect me to get very concrete and specific in this post, I'm afraid I have to disappoint you. What I will do, is share a way to think about actions that has been helpful to me.&lt;/p&gt;
&lt;h3&gt;Quality is something emergent&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://twitter.com/charrett"&gt;Anne-Marie Charrett&lt;/a&gt; says in a blog post titled "&lt;a href="https://mavericktester.com/2018/12/04/emergent-quality/"&gt;Emergent Quality&lt;/a&gt;":&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"My hypothesis is that quality is an emergent behaviour. It relies on a whole set of independent systems coming together to create this emergent property. We can never truly know what quality is. It’s constantly changing and morphing into different things. For sure, we can provide examples, but know quality itself? I’m not convinced."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/thinking-about-quality-so-what-to-do/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>horizon</category><category>leadership</category><category>peer conference</category><category>quality</category><category>small steps</category><guid>https://j19sch.github.io/blog/2021/thinking-about-quality-so-what-to-do/</guid><pubDate>Wed, 07 Apr 2021 11:25:02 GMT</pubDate></item><item><title>Thinking about quality: management paradigms and quality</title><link>https://j19sch.github.io/blog/2021/management-paradigms-and-quality/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;On 30 January 2021 I participated in the Quality Acceleration Peer Conference organized by Huib Schoots and Joost Voskuil. Participants were &lt;a href="https://twitter.com/alanpage"&gt;Alan Page&lt;/a&gt;, &lt;a href="https://twitter.com/unremarkableQA"&gt;Areti Panou&lt;/a&gt;, &lt;a href="https://twitter.com/northern_tester"&gt;Ash Winter&lt;/a&gt;, &lt;a href="https://twitter.com/btknaack"&gt;Bart Knaack&lt;/a&gt;, &lt;a href="https://twitter.com/conorfi"&gt;Conor Fitzgerald&lt;/a&gt;, &lt;a href="https://twitter.com/roukedejong"&gt;Rouke de Jong&lt;/a&gt;, &lt;a href="https://twitter.com/gwendiagram"&gt;Gwen Diagram&lt;/a&gt;, &lt;a href="https://twitter.com/gdinwiddie"&gt;George Dinwiddie&lt;/a&gt;, &lt;a href="https://twitter.com/janetgregoryca"&gt;Janet Gregory&lt;/a&gt;, &lt;a href="https://twitter.com/joost_voskuil"&gt;Joost Voskuil&lt;/a&gt;, &lt;a href="https://twitter.com/jpjwolli"&gt;Joost van Wollingen&lt;/a&gt;, &lt;a href="https://twitter.com/mmeijeri"&gt;Martijn Meijering&lt;/a&gt;, &lt;a href="https://twitter.com/robmeaney"&gt;Rob Meaney&lt;/a&gt;, &lt;a href="https://twitter.com/vinwijnl"&gt;Vincent Wijnen&lt;/a&gt; - with &lt;a href="https://twitter.com/huibschoots"&gt;Huib Schoots&lt;/a&gt; facilitating the peer conference. The main topics mentioned in the invite were: "How can you sell quality?", "How can you convince people that quality can accelerate software delivery?", and "What limitations or barriers do you hit?"&lt;/p&gt;
&lt;p&gt;Reflecting during and after our discussions on these topics, I realized there are some interesting things going on about how we talk about quality and how to sell it. Enough interesting things to fill more than one blog post, so this will be a four-part series. And I might expand on some ideas in the series after that.&lt;/p&gt;
&lt;p&gt;This is the third part, exploring five different management paradigms as identified by &lt;a href="https://twitter.com/carolsanford"&gt;Carol Sanford&lt;/a&gt; in her book "&lt;a href="https://carolsanford.com/the-regenerative-business/"&gt;The Regenerative Business&lt;/a&gt;" and how they affect quality. The first part was about choosing your value system can be found &lt;a href="https://j19sch.github.io/blog/2021/choosing-your-value-system/"&gt;here&lt;/a&gt;. The second part about selling quality can be found &lt;a href="https://j19sch.github.io/blog/2021/who-doesnt-want-quality/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Psychological cover and psychological safety&lt;/h3&gt;
&lt;p&gt;If the challenge of quality is getting several things right (perception, desire, and means) and getting to an agreement among people, how we organize ourselves becomes a crucial topic. As W. Edwards Deming said: "A bad system will beat a good person every time." Or as Kurt Lewin said in a more neutral way: "Behavior is a function of the Person and the Environment." An important part of any environment is psychological safety. In &lt;a href="https://www.conversationaltransformation.com/blog/we're-the-aliens-three-ways-to-seek-safety/"&gt;episode 155&lt;/a&gt; of their &lt;a href="https://www.conversationaltransformation.com/troubleshooting-agile-podcast/"&gt;Troubleshooting Agile&lt;/a&gt; podcast &lt;a href="https://twitter.com/Jtf"&gt;Jeffrey Fredrick&lt;/a&gt; and &lt;a href="https://twitter.com/douglassquirrel"&gt;Douglas Squirrel&lt;/a&gt; make an interesting distinction between psychological cover and psychological safety.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/management-paradigms-and-quality/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>management</category><category>paradigms</category><category>peer conference</category><category>quality</category><guid>https://j19sch.github.io/blog/2021/management-paradigms-and-quality/</guid><pubDate>Mon, 15 Mar 2021 08:32:08 GMT</pubDate></item><item><title>Thinking about quality: who doesn't want quality?</title><link>https://j19sch.github.io/blog/2021/who-doesnt-want-quality/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;On 30 January 2021 I participated in the Quality Acceleration Peer Conference organized by Huib Schoots and Joost Voskuil. Participants were &lt;a href="https://twitter.com/alanpage"&gt;Alan Page&lt;/a&gt;, &lt;a href="https://twitter.com/unremarkableQA"&gt;Areti Panou&lt;/a&gt;, &lt;a href="https://twitter.com/northern_tester"&gt;Ash Winter&lt;/a&gt;, &lt;a href="https://twitter.com/btknaack"&gt;Bart Knaack&lt;/a&gt;, &lt;a href="https://twitter.com/conorfi"&gt;Conor Fitzgerald&lt;/a&gt;, &lt;a href="https://twitter.com/roukedejong"&gt;Rouke de Jong&lt;/a&gt;, &lt;a href="https://twitter.com/gwendiagram"&gt;Gwen Diagram&lt;/a&gt;, &lt;a href="https://twitter.com/gdinwiddie"&gt;George Dinwiddie&lt;/a&gt;, &lt;a href="https://twitter.com/janetgregoryca"&gt;Janet Gregory&lt;/a&gt;, &lt;a href="https://twitter.com/joost_voskuil"&gt;Joost Voskuil&lt;/a&gt;, &lt;a href="https://twitter.com/jpjwolli"&gt;Joost van Wollingen&lt;/a&gt;, &lt;a href="https://twitter.com/mmeijeri"&gt;Martijn Meijering&lt;/a&gt;, &lt;a href="https://twitter.com/robmeaney"&gt;Rob Meaney&lt;/a&gt;, &lt;a href="https://twitter.com/vinwijnl"&gt;Vincent Wijnen&lt;/a&gt; - with &lt;a href="https://twitter.com/huibschoots"&gt;Huib Schoots&lt;/a&gt; facilitating the peer conference. The main topics mentioned in the invite were: "How can you sell quality?", "How can you convince people that quality can accelerate software delivery?", and "What limitations or barriers do you hit?"&lt;/p&gt;
&lt;p&gt;Reflecting during and after our discussions on these topics, I realized there are some interesting things going on about how we talk about quality and how to sell it. Enough interesting things to fill more than one blog post, so this will be a four-part series. And I might expand on some ideas in the series after that.&lt;/p&gt;
&lt;p&gt;This is the second part. The first one about choosing your value system can be found &lt;a href="https://j19sch.github.io/blog/2021/choosing-your-value-system/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Everyone wants quality, right?&lt;/h3&gt;
&lt;p&gt;In the previous post I distinguished two definitions of quality. If we proceed with the second and more interesting one, value to a person who matters, I would argue that everyone wants quality and is already doing their best to get it. The alternative would be that some people are not doing their best to get the things they value - which seems absurd to me.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/who-doesnt-want-quality/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>peer conference</category><category>problems</category><category>quality</category><category>selling</category><guid>https://j19sch.github.io/blog/2021/who-doesnt-want-quality/</guid><pubDate>Thu, 25 Feb 2021 11:34:08 GMT</pubDate></item><item><title>Thinking about quality: choosing your value system</title><link>https://j19sch.github.io/blog/2021/choosing-your-value-system/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;On 30 January 2021 I participated in the Quality Acceleration Peer Conference organized by Huib Schoots and Joost Voskuil. Participants were &lt;a href="https://twitter.com/alanpage"&gt;Alan Page&lt;/a&gt;, &lt;a href="https://twitter.com/unremarkableQA"&gt;Areti Panou&lt;/a&gt;, &lt;a href="https://twitter.com/northern_tester"&gt;Ash Winter&lt;/a&gt;, &lt;a href="https://twitter.com/btknaack"&gt;Bart Knaack&lt;/a&gt;, &lt;a href="https://twitter.com/conorfi"&gt;Conor Fitzgerald&lt;/a&gt;, &lt;a href="https://twitter.com/roukedejong"&gt;Rouke de Jong&lt;/a&gt;, &lt;a href="https://twitter.com/gwendiagram"&gt;Gwen Diagram&lt;/a&gt;, &lt;a href="https://twitter.com/gdinwiddie"&gt;George Dinwiddie&lt;/a&gt;, &lt;a href="https://twitter.com/janetgregoryca"&gt;Janet Gregory&lt;/a&gt;, &lt;a href="https://twitter.com/joost_voskuil"&gt;Joost Voskuil&lt;/a&gt;, &lt;a href="https://twitter.com/jpjwolli"&gt;Joost van Wollingen&lt;/a&gt;, &lt;a href="https://twitter.com/mmeijeri"&gt;Martijn Meijering&lt;/a&gt;, &lt;a href="https://twitter.com/robmeaney"&gt;Rob Meaney&lt;/a&gt;, &lt;a href="https://twitter.com/vinwijnl"&gt;Vincent Wijnen&lt;/a&gt; - with &lt;a href="https://twitter.com/huibschoots"&gt;Huib Schoots&lt;/a&gt; facilitating the peer conference. The main topics mentioned in the invite were: "How can you sell quality?", "How can you convince people that quality can accelerate software delivery?", and "What limitations or barriers do you hit?"&lt;/p&gt;
&lt;p&gt;Reflecting during and after our discussions on these topics, I realized there are some interesting things going on about how we talk about quality and how to sell it. Enough interesting things to fill more than one blog post, so this will be a four-part series. And I might expand on some ideas in the series after that.&lt;/p&gt;
&lt;h3&gt;Quality has two different meanings&lt;/h3&gt;
&lt;p&gt;On the one hand, we use quality when we talk about things that are obviously better. A &lt;a href="https://www.youtube.com/watch?v=-3mB4MBITEI"&gt;$3500 coffee grinder&lt;/a&gt; is obviously better than &lt;a href="https://www.youtube.com/watch?v=AVYGxext8XI"&gt;a £50 one&lt;/a&gt;. An application that does not crash on you is obviously better than one that does. Almost all other ways to input your phone number are better than &lt;a href="https://qz.com/679782/programmers-imagine-the-most-ridiculous-ways-to-input-a-phone-number/"&gt;these&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/choosing-your-value-system/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>peer conference</category><category>quality</category><category>value systems</category><guid>https://j19sch.github.io/blog/2021/choosing-your-value-system/</guid><pubDate>Mon, 15 Feb 2021 19:09:08 GMT</pubDate></item><item><title>(clj 5) Loop and recur, into and conj</title><link>https://j19sch.github.io/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Yet again it's been a while since I did some Clojure or blogged about it. This time I'm writing this blog post
three months after working on the code on September 5, 6 and 12. I'm not going to dwell on that too long, because
other things in my life were more important. I did feel a little sad when this year's &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;
launched and I realized my Clojure is nowhere near a state where I could attempt the puzzles. So I ended up doing
the first 10 days in Python, which is twice as far as I got last year.&lt;/p&gt;
&lt;p&gt;I also feel like my current approach to learning lends itself well enough to going slow. Taking my time to play around
and make notes with while working through a section of &lt;a href="https://www.braveclojure.com/"&gt;Clojure for the Brave and True&lt;/a&gt;
and then revisiting my code and notes later to write a blog post, does seem to result in stuff actually sticking in my memory.
(Disclaimer: am writing this before writing the rest of this blog post.) Slow is smooth and smooth is fast, as they say.&lt;/p&gt;
&lt;p&gt;The section I tackled in September is "Pulling It All Together" from Chapter 3, which describes the construction of a 
piece of code of about 50 lines in which - I'm sorry to say -  a hobbit gets hit in different body parts.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://j19sch.github.io/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/</guid><pubDate>Sat, 26 Dec 2020 09:09:08 GMT</pubDate></item></channel></rss>