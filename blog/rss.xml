<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes</title><link>https://smallsheds.garden/</link><description>Joep Schuurkes</description><atom:link href="https://smallsheds.garden/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:site@joep.slmail.me"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow" target="_blank"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://licensebuttons.net/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Mon, 12 Jun 2023 07:04:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Making meetings work</title><link>https://smallsheds.garden/blog/2023/making-meetings-work/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/making-meetings-work/venn-meeting.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Too often I've heard people say: &lt;em&gt;"Oh no, not another meeting!"&lt;/em&gt; Usually this means they feel their time at work is split between time in meetings and time in which they do actual work. And to be fair, they have a point. I too have been in plenty of meetings that didn't achieve much of anything. It doesn't have to be this way, however. Meetings can be effective and they can leave you with a real sense of having accomplished something. And in this post I'll explain how to make that happen.&lt;/p&gt;
&lt;h2&gt;We struggle with meetings&lt;/h2&gt;
&lt;div class="row"&gt;
    &lt;div class="col-md-4"&gt;
        &lt;figure class="figure"&gt;
            &lt;img src="https://smallsheds.garden/images/2023/making-meetings-work/sisyphus-titian.jpg" class="figure-img img-fluid rounded" alt="Sisyphus by Titian"&gt;
            &lt;figcaption class="figure-caption text-center"&gt;Sisyphus by Titian&lt;/figcaption&gt;
        &lt;/figure&gt;
    &lt;/div&gt;
    &lt;div class="col-md-8"&gt;
            &lt;p style="margin-top:10px"&gt;We struggle with meetings. On the one hand we keep proposing them, scheduling them, attending them. On the other hand we keep complaining about them. We feel sorry for people with a day full of meetings. When a meeting ends early, we &lt;em&gt;"get 10 minutes of our lives back"&lt;/em&gt;.&lt;/p&gt;
            &lt;p&gt;To that &lt;a href="https://twitter.com/j19sch/status/1179798961131012096"&gt;I say&lt;/a&gt;:&lt;/p&gt;
            &lt;blockquote&gt;
                &lt;p&gt;&lt;em&gt;If you feel you do all your work outside of meetings, you're meeting wrong.&lt;/em&gt;&lt;/p&gt;
            &lt;/blockquote&gt;
            &lt;p&gt;It's something I realized while I was a scrum master: my work happens during meetings. Mostly team meetings and 1-to-1s. There's prep before and follow-up after meetings, but I did the core of my job through meetings.&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/making-meetings-work/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>facilitation</category><category>leadership</category><category>self-organization</category><category>sociocracy 3.0</category><guid>https://smallsheds.garden/blog/2023/making-meetings-work/</guid><pubDate>Tue, 30 May 2023 07:31:25 GMT</pubDate></item><item><title>My five favorite testing questions</title><link>https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I realized there are a few testing questions I use a lot. They lie at the top of my testing toolbox, so to speak. Together they shape my testing style, making it easier for me to discover certain things, but probably also harder to find other kinds of things. So here are my five favorite testing questions, in no particular order.&lt;/p&gt;
&lt;h2&gt;What if there are zero, one, many, lots of this thing?&lt;/h2&gt;
&lt;p&gt;Last year I expressed my surprise &lt;a href="https://chaos.social/@joeposaurus/109427704814392787"&gt;on Mastodon&lt;/a&gt; how many times I've found bugs by asking the question: &lt;em&gt;"What if there are 0 / 1 / several / lots of this thing?"&lt;/em&gt; And if you're working closely enough to the code, you should also ask about "null".&lt;/p&gt;
&lt;p&gt;Quite a few people responded to my message. Turns out it's a &lt;a href="https://www.qwan.eu/2021/07/09/tdd-0-1-n.html"&gt;very&lt;/a&gt; &lt;a href="http://blog.wingman-sw.com/tdd-guided-by-zombies"&gt;common&lt;/a&gt; &lt;a href="https://mas.to/@zebulon/109428667658139893"&gt;pattern&lt;/a&gt; in TDD. And Brian Marick&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; remembered it &lt;a href="https://mstdn.social/@marick/109428042023981110"&gt;standing out&lt;/a&gt; when he was looking into fixed bugs in the Linux kernel they used in the '80s. Personally I learned it from Elisabeth Hendrickson's &lt;a href="https://web.archive.org/web/20150217124452/http://testobsessed.com/wp-content/uploads/2011/04/testheuristicscheatsheetv1.pdf"&gt;"Test Heuristics Cheat Sheet"&lt;/a&gt;, which found a &lt;a href="https://www.ministryoftesting.com/articles/ab1cd85c?s_id=14715206"&gt;new home&lt;/a&gt; last year at the Ministry of Testing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>exploratory testing</category><category>heuristics</category><category>software testing</category><guid>https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/</guid><pubDate>Wed, 03 May 2023 06:57:25 GMT</pubDate></item><item><title>A backlog item is a backlog item is a backlog item</title><link>https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Originally Scrum was very much about &lt;em&gt;"You tell us what needs building. We'll decide how we build it and how soon we'll deliver."&lt;/em&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; I've never seen that version of Scrum. The version I have seen, has a product manager try to get as many features into a sprint as reasonably possible - for varying degrees of reasonable. This comes at the expense of maintenance work, such as keeping libraries up-to-date or removing technical debt. And it incentivizes the team to cut corners on features, to not leave code in a better state than they found it, to not fix smaller bugs and instead log them somewhere for later.&lt;/p&gt;
&lt;p&gt;One solution I see to this problem, is to put an engineering manager fully in charge of the team.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:5"&gt;2&lt;/a&gt;&lt;/sup&gt; The product manager prioritizes the features. The engineering manager prioritizes the full scope of work for the team. That's not a simple change to pull off, however.&lt;/p&gt;
&lt;p&gt;Another solution might be to change the way we use our backlogs. If a product manager gets to prioritize all the work, and the tool they use is a backlog, then we should make sure that all the work&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:2"&gt;3&lt;/a&gt;&lt;/sup&gt; is in the backlog: features, bugs, and technical debt. Let's take a look at each of these three categories of work.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>bugs</category><category>tech debt</category><category>work management</category><guid>https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/</guid><pubDate>Mon, 03 Apr 2023 06:51:25 GMT</pubDate></item><item><title>Metrics, models and conversations</title><link>https://smallsheds.garden/blog/2023/metrics-models-and-conversations/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;A few weeks ago someone suggested we should start measuring how many automated test cases versus how many manual test cases we have. Luckily it was part of a longer list of suggested metrics and it was also presented in that way: a list of options, to be discussed later. And the reason I say "luckily" is because I knew I disagreed with using that metric, but didn't have a good explanation as to why. At that moment I could have given a minutes-long monologue about how that metric doesn't fit how I think we should be thinking about testing. However, I have zero expectations that such a monologue could have worked in that situation. It would be all over the place as I philosophize about testing and make all kinds of connections and analogies. A convincing argument that does not make.&lt;/p&gt;
&lt;p&gt;So since then, I've been thinking: how would I explain my position on measuring manual versus automated test cases? Something to the point, something relatable, something that acknowledges the need behind asking for this metric. And then it hit me: use cooking as an analogy. Now I know plenty of people have made this analogy before. However, I don't remember reading everything I will cover in this post somewhere else. Also, there's value in different people saying similar things, but each in their own voice.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/metrics-models-and-conversations/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>measurements</category><category>metrics</category><category>test automation</category><category>tools</category><guid>https://smallsheds.garden/blog/2023/metrics-models-and-conversations/</guid><pubDate>Sun, 12 Mar 2023 09:11:25 GMT</pubDate></item><item><title>My note-taking system for work</title><link>https://smallsheds.garden/blog/2023/my-note-taking-system-for-work/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/note-taking-system/notebook-and-pen.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Ever since I started working back in 2006, I've used a notebook. Initially, I didn't have a system, I just wrote things down. Then, about seven years ago, when I became a scrum master, my notebook became more important. As a tester, I could use my team's board to keep track of my work. As a scrum master, none of my work was on the board. And even though my role has changed several times since then, my need for keeping track of things hasn't.&lt;/p&gt;
&lt;p&gt;So somewhere along the way - and to be honest I forgot when exactly - I created my own system of note-taking based on bullet journaling. It's simple and straightforward. It helps me plan my day, list possible future actions, and keep a record of what I've been doing. On the one hand it seems like something small and simple. On the other hand it has been a major help to me, so I figured it's worth sharing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/my-note-taking-system-for-work/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>note-taking</category><category>tools</category><guid>https://smallsheds.garden/blog/2023/my-note-taking-system-for-work/</guid><pubDate>Wed, 01 Mar 2023 14:39:25 GMT</pubDate></item><item><title>Our work management tools are limiting our imagination</title><link>https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/work-mgt-tools/fig4-stories-on-a-wall.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Several weeks ago I had a thought that felt both serious and not serious, so &lt;a href="https://chaos.social/@joeposaurus/109635747014542350"&gt;I asked on Mastodon&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should I write a blog post about companies leaving money on the table by not leveraging their choice of work management tool (Jira, Shortcut, etc) as a competitive advantage?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;31% said "yes" and 54% said "a post about what now?", which I suppose reflects my own feelings about the topic. And it motivated me to write this post - especially that 54%. So let's talk about work management tools, the original (user) stories, affordances and constraints, and how these tools are limiting our imagination. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>agile manifesto</category><category>quality engineering</category><category>software development</category><category>tools</category><category>work management</category><guid>https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/</guid><pubDate>Sun, 29 Jan 2023 21:34:25 GMT</pubDate></item><item><title>(clj 11) Moving on from some unsolved exercises</title><link>https://smallsheds.garden/blog/clojure/2022/clj-11-moving-on-from-some-unsolved-exercises/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;At the end of chapter 4 of &lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;"Clojure for the Brave and True"&lt;/a&gt; there are &lt;a href="https://www.braveclojure.com/core-functions-in-depth/#Exercises"&gt;four exercises&lt;/a&gt;. This post is about me deciding to move on to chapter 5 after solving 1.5 of these exercises.&lt;/p&gt;
&lt;h2&gt;The challenge with these exercises&lt;/h2&gt;
&lt;p&gt;A good example to talk about the challenge with these exercises is the second one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function, append, which will append a new suspect to your list of suspects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-11-moving-on-from-some-unsolved-exercises/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>brave clojure</category><category>clojure</category><category>programming</category><guid>https://smallsheds.garden/blog/clojure/2022/clj-11-moving-on-from-some-unsolved-exercises/</guid><pubDate>Thu, 29 Dec 2022 15:08:36 GMT</pubDate></item><item><title>Three lessons after three months of quality engineering</title><link>https://smallsheds.garden/blog/2022/three-lessons-after-three-months-of-quality-engineering/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Three months ago I started a new job as a quality engineer, supporting two teams. So far it's been an interesting challenge. The two teams were formed only a few months before I joined, although some team members had been working for the company before that. Each team has their own product manager. We also have an engineering manager, but he joined only two weeks before I did. And then I was added to the mix, with a job description that didn't give a lot more guidance than: support the team in things related to testing and quality.&lt;/p&gt;
&lt;p&gt;So my first task in my new job was figuring out what my job was. Or rather, figure out what concrete things I could do that fit that job description. This was not made easier by the fact that we're a fully remote company. Not being in the same space throughout the day does make things harder when you're trying to find your place. Reflecting on the past three months made me realize there are three things that are really important: visibility, connections, and patience.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/three-lessons-after-three-months-of-quality-engineering/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>quality engineering</category><category>skills</category><category>small steps</category><guid>https://smallsheds.garden/blog/2022/three-lessons-after-three-months-of-quality-engineering/</guid><pubDate>Sun, 27 Nov 2022 15:41:25 GMT</pubDate></item><item><title>Agile tester or quality engineer, who's to say?</title><link>https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In her article &lt;a href="https://web.archive.org/web/20041001003124/http://www.qualitytree.com/feature/btwq.pdf"&gt;"Better Testing, Worse Quality?"&lt;/a&gt; &lt;a href="https://ruby.social/@testobsessed"&gt;Elisabeth Hendrickson&lt;/a&gt; makes an interesting case about independent testing, i.e. testing done by an independent test team. She discovered that beyond a certain point, investigating more in independent testing will make both quality and speed go down, not up. In &lt;a href="https://itrevolution.com/podcast/the-idealcast-episode-3/"&gt;episode 3&lt;/a&gt; of the &lt;a href="https://itrevolution.com/podcast/"&gt;Idealcast&lt;/a&gt;, she summarizes her article as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"[...] when you ramp up the amount of investment in an independent test group, then given the amount of pressure that's already on the developers to deliver, it is so easy&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; for the developers to say, this isn't my problem anymore. Thank goodness we've got the professionals over here. It's their job to test." &lt;em&gt;(00:11:21)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later in the article, Elisabeth Hendrickson gives advice on how to avoid or escape this spiral of decreasing quality and speed. There are four dials you can turn either up or down:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>quality engineering</category><category>software testing</category><guid>https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/</guid><pubDate>Sun, 06 Nov 2022 15:29:25 GMT</pubDate></item><item><title>Quality: different purposes, different definitions</title><link>https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;For years when asked to define quality, I've said "value to a person who matters"&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Not too long ago I used that definition in the &lt;a href="https://smallsheds.garden/blog/2021/choosing-your-value-system/"&gt;first post&lt;/a&gt; of my four-part series "Thinking about quality". However, in the &lt;a href="https://smallsheds.garden/blog/2021/thinking-about-quality-so-what-to-do/"&gt;fourth post&lt;/a&gt; of that series I also said that quality is something emergent. And I continued with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can have long discussions about what quality is, but that's a different question from how do you get quality?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Today I took this one step further, when I realized that depending on the context, I talk very differently about quality. And while I may not define 'quality' explicitly in every conversation, implicitly I'm still using different definitions. That alone, I think is interesting: instead of a single, general definition of quality that always applies, I have different definitions depending on their purpose&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>quality</category><category>quality engineering</category><category>semantics</category><category>software development</category><category>software testing</category><guid>https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/</guid><pubDate>Wed, 24 Aug 2022 17:41:25 GMT</pubDate></item></channel></rss>