<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes</title>
  <id>https://smallsheds.garden/blog/feed.atom</id>
  <updated>2024-11-25T19:19:36Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/blog/feed.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Being intentional about exploratory testing</title>
    <id>https://smallsheds.garden/blog/2024/being-intentional-about-exploratory-testing/</id>
    <updated>2024-11-09T00:00:00+01:00</updated>
    <published>2024-11-09T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/being-intentional-about-exploratory-testing/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;&lt;em&gt;This is the second post in a (to be) three-part series about my statement "The difference between a test case and a requirement is the moment of discovery."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the previous post I &lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/#translated-requirements"&gt;distinguished&lt;/a&gt; test cases that are translated requirements from ones that aren't. This is something I learned from &lt;a href="https://www.workroom-productions.com/"&gt;James Lyndsay&lt;/a&gt;. As he describes in &lt;em&gt;&lt;a href="https://www.workroom-productions.com/why-exploration-has-a-place-in-any-strategy/"&gt;"Why Exploration has a Place in any Strategy"&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some tests are designed to find risks. They're made on-the-fly and run once. Some are designed to tell us about retained value. They're made once, and run forever after. You need &lt;em&gt;both&lt;/em&gt;: they tell you different things.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tests with a focus on value are based on requirements, on things we know we want, they are prescribed (as in: written before). The tests with a focus on risks are exploratory, they are based on our decisions in the moment, we look for surprises and decide how we feel about those surprises.&lt;/p&gt;
&lt;p&gt;One thing I've noticed through the years, is that a lot more exploratory testing is happening than we give credit for. It's hidden, a required but implicit part of the work. We do it, but we're not intentional about it.&lt;/p&gt;
&lt;p&gt;Today I want to argue that it pays to be more intentional about exploratory testing. Before I get there, however, I want to explain what exploratory testing is, because there are still plenty of misconceptions going around.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/being-intentional-about-exploratory-testing/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="exploratory-testing" label="exploratory testing"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>The Fluxx ensemble exercise</title>
    <id>https://smallsheds.garden/blog/2024/the-fluxx-ensemble-exercise/</id>
    <updated>2024-10-13T00:00:00+02:00</updated>
    <published>2024-10-13T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/the-fluxx-ensemble-exercise/"/>
    <summary type="html">&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2024/ensemble.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Earlier this week I ran a &lt;a href="https://hustef.hu/joep_schuurkes_2024/"&gt;full-day workshop&lt;/a&gt; at the excellent &lt;a href="https://hustef.hu/"&gt;HUSTEF&lt;/a&gt; conference on working in an ensemble (aka mob programming/testing or software teaming). As part of the workshop I tried out a new exercise, in which participants were allowed to change the rules of the ensemble. The goal was to experience why the basic rules of ensembling are the way they are and what happens if they are different.&lt;/p&gt;
&lt;p&gt;Since the participants really liked the exercise, I figured I'd write about it and name it: the Fluxx ensemble exercise. For those not familiar with &lt;a href="https://www.looneylabs.com/games/fluxx"&gt;Fluxx&lt;/a&gt;: it is a card game in which changing the rules is a key part of the game. It's one of my favourite games.&lt;/p&gt;
&lt;p&gt;Before I go into the exercise, though, I'll first need to explain the basic rules of ensembling.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-fluxx-ensemble-exercise/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="ensembling" label="ensembling"/>
    <category term="facilitation" label="facilitation"/>
    <category term="teaching" label="teaching"/>
    <category term="workshop" label="workshop"/>
  </entry>
  <entry>
    <title>What do you fix when you fix a test?</title>
    <id>https://smallsheds.garden/blog/2024/what-do-you-fix-when-you-fix-a-test/</id>
    <updated>2024-08-25T00:00:00+02:00</updated>
    <published>2024-08-25T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/what-do-you-fix-when-you-fix-a-test/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;You ran the tests&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/what-do-you-fix-when-you-fix-a-test/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; - or a pipeline did it for you - and some of them failed. Time to fix the tests! But what is it exactly that needs fixing?&lt;/p&gt;
&lt;p&gt;There are quite a few things that might make a test fail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an issue with the build&lt;/li&gt;
&lt;li&gt;an issue with the pipeline (if that's where the test runs)&lt;/li&gt;
&lt;li&gt;an issue in the environment the code under test is running on&lt;/li&gt;
&lt;li&gt;an issue in the environment the test code is running on&lt;/li&gt;
&lt;li&gt;a bug in the code under test&lt;/li&gt;
&lt;li&gt;a mistake in the test code&lt;/li&gt;
&lt;li&gt;a mistake in what the test should test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Arguably, on the last three describe a test that fails. The test did its job detecting a problem. In the first four we didn't even get that far. The issues prevented the test from doing its job. So in those cases, it's not the test(s) as such that need fixing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/what-do-you-fix-when-you-fix-a-test/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="coverage" label="coverage"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-automation" label="test automation"/>
    <category term="test-strategy" label="test strategy"/>
  </entry>
  <entry>
    <title>The difference between a test case and a requirement is the moment of discovery</title>
    <id>https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/</id>
    <updated>2024-05-27T00:00:00+02:00</updated>
    <published>2024-05-27T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;There are several straightforward ways to distinguish a test case from a requirement. A test case tells you how to check some kind of thing about the application, a requirement tells you that the application should do some kind of thing. A test case is written by a tester, a requirement by a business analyst. A test case takes the shape of an action and an evaluation of the result, a requirement takes the form of a sentence like "product ABC shall do XYZ."&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;A less straightforward, but more interesting way to distinguish a test case and a requirement, is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference between a test case and a requirement is the moment of discovery.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post I want to explore the meaning of that statement. In the next post I'll explore how looking at requirements and test cases in this way, can help us to do better testing. So this post will be a bit more philosophical, the next one more practical.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="exploratory-testing" label="exploratory testing"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="semantics" label="semantics"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-cases" label="test cases"/>
  </entry>
  <entry>
    <title>Two short checklists for Scrum</title>
    <id>https://smallsheds.garden/blog/2024/two-short-checklists-for-scrum/</id>
    <updated>2024-05-09T00:00:00+02:00</updated>
    <published>2024-05-09T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/two-short-checklists-for-scrum/"/>
    <summary type="html">&lt;h2 class="small"&gt;checklist no.1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Do you add acceptance criteria and story points to each ticket before planning?&lt;/li&gt;
&lt;li&gt;Do you have daily team meetings where people provide updates on their progress?&lt;/li&gt;
&lt;li&gt;After each iteration, do you report to stakeholders what work was done and what will be planned next?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="small"&gt;checklist no.2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Is the team protected during the sprint from stakeholders trying to interfere?&lt;/li&gt;
&lt;li&gt;Is a sprint focused on achieving a goal and is how that goal is achieved, left sufficiently open?&lt;/li&gt;
&lt;li&gt;Does the team address impediments as soon as they are discovered?&lt;/li&gt;
&lt;/ul&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="maturity" label="maturity"/>
    <category term="scrum" label="scrum"/>
  </entry>
  <entry>
    <title>The difference between a dead and an alive Agile Manifesto</title>
    <id>https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/</id>
    <updated>2024-04-02T00:00:00+02:00</updated>
    <published>2024-04-02T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;One of my favorite books on leadership is "Extreme Ownership" by Jocko Willink and Leif Babin. I can imagine some people bouncing off of the book because of the Navy SEAL angle, but to be honest I'm a bit of a sucker for the whole military leadership genre.&lt;/p&gt;
&lt;p&gt;The second part of "Extreme Ownership" covers four critical leadership concepts, the "Laws of Combat". Curiously enough, you can map these to the four values in the Agile Manifesto. These four concepts do come in a specific order, so you have to shuffle the Agile values around a little bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cover and Move maps to customer collaboration over contract negotiation.&lt;/li&gt;
&lt;li&gt;Simple maps to working software over comprehensive documentation.&lt;/li&gt;
&lt;li&gt;Prioritize and Execute maps to responding to change over following a plan.&lt;/li&gt;
&lt;li&gt;Decentralized Command maps to individuals and interactions over processes and tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To me this mapping is interesting in two ways. It sheds a different light on the four Agile values. And it's an example of how I think we should be engaging with the Agile Manifesto, in a way that keeps it alive.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="agile-manifesto" label="agile manifesto"/>
    <category term="books" label="books"/>
    <category term="values" label="values"/>
  </entry>
  <entry>
    <title>Notes from the March '24 FroGS conf open space</title>
    <id>https://smallsheds.garden/blog/2024/notes-from-the-march-24-frogs-conf-open-space/</id>
    <updated>2024-03-24T00:00:00+01:00</updated>
    <published>2024-03-24T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/notes-from-the-march-24-frogs-conf-open-space/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Yesterday &lt;a href="https://elizabethzagroba.com/"&gt;Elizabeth Zagroba&lt;/a&gt;, &lt;a href="https://www.huibschoots.nl/"&gt;Huib Schoots&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/techsannetized/"&gt;Sanne Visser&lt;/a&gt; and I ran another &lt;a href="https://frogsconf.nl"&gt;FroGS conf&lt;/a&gt; online open space. There were plenty of great sessions, below are some notes from the five sessions I participated in. Thank you to everyone who was there, I had a great time!&lt;/p&gt;
&lt;p&gt;If you want to join one of our next FroGS conf events, head over to &lt;a href="https://frogsconf.nl/"&gt;our site&lt;/a&gt; and &lt;a href="https://frogsconf.nl/register/"&gt;subscribe&lt;/a&gt; to our newsletter.&lt;/p&gt;
&lt;h2 class="small"&gt;From notes to shared documentation culture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Co-creation works for code. In what ways is co-creation for documentation different?&lt;/li&gt;
&lt;li&gt;Why do we talk about "an audience" for documentation, instead of about "the contributors"?&lt;/li&gt;
&lt;li&gt;The purpose of documentation flips from "what we build" to "what we built".&lt;/li&gt;
&lt;li&gt;Old research paper on documentation: only documentation with lasting usefulness is architecture and test cases. Everything else is just notes.&lt;/li&gt;
&lt;li&gt;Documentation heuristic: Is it easier/faster to reverse engineer it instead?&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/notes-from-the-march-24-frogs-conf-open-space/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary>
    <category term="conferences" label="conferences"/>
  </entry>
  <entry>
    <title>So you want to become a test engineer?</title>
    <id>https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/</id>
    <updated>2024-02-26T00:00:00+01:00</updated>
    <published>2024-02-26T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Becoming a test engineer these days is probably harder than it was for me back in 2006. Back then, there was no test automation, we worked in the slow rhythm of waterfall, and for years I was in a team with other testers or at least had a test manager to bounce ideas off. These days, there's a good chance none of these are true as you start as a test engineer.&lt;/p&gt;
&lt;p&gt;While most of these changes are good ones (please don't take test automation or agile away), it does make me empathize with anyone who starts their career as a test engineer today. The pace is higher and the skill set is broader. More importantly, you need to navigate your career while no one is really sure where to position testers in their organization. That's not a straightforward environment to start a career in.&lt;/p&gt;
&lt;p&gt;So here are four pieces of advice I'd give myself if I'd start my career in testing today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;testing can be many different things&lt;/li&gt;
&lt;li&gt;you're a software engineer that specializes in testing&lt;/li&gt;
&lt;li&gt;the end-game is leadership skills&lt;/li&gt;
&lt;li&gt;shape your career in a way that suits you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="career" label="career"/>
    <category term="leadership" label="leadership"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>Tackling test automation in a new language</title>
    <id>https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/</id>
    <updated>2024-02-11T00:00:00+01:00</updated>
    <published>2024-02-11T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;While there's value in learning all the ins-and-outs of one particular language, its ecosystem and its testing libraries, I think there's also a lot of value in having experience in several. Or at least, in two. If you only know one, you don't really know what's essential and what's incidental to the one set of tools you know. You don't know from experience in what ways things could be different.&lt;/p&gt;
&lt;p&gt;Picking up a new language is not trivial though, especially if it's your second one. There will be a lot to learn. You will notice similarities between the new language and the one(s) you already know. Sometimes those similarities will help you, sometimes they will mislead you.&lt;/p&gt;
&lt;p&gt;Also, it's more than picking up a new language. There are also the testing libraries you will use
and the language's ecosystem (e.g. how to install those libraries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; or how to set up a pre-commit hook with a linter). That's quite a package.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="programming" label="programming"/>
    <category term="test-automation" label="test automation"/>
  </entry>
  <entry>
    <title>Never estimate in something that's not negotiable</title>
    <id>https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/</id>
    <updated>2024-01-22T00:00:00+01:00</updated>
    <published>2024-01-22T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Estimates in software development are hard. There are good reasons not to estimate at all. Work in thin slices, keep cycle time low, and deliver at steady pace. And yet, it's still fair of others to ask: when will this big chunk of work be done? And not "maybe done", but "definitely-I-can-promise-this-to-people done".&lt;/p&gt;
&lt;p&gt;Ideally you can calculate an expected delivery date based on your current pace and the number of slices in the new big chunk of work. But maybe you don't have the slices yet. Or it's a new kind of work and your current pace won't really apply. Or there are upcoming changes in your team or organization that make any calculation tenuous.&lt;/p&gt;
&lt;p&gt;So you have to provide an estimate. And you do. You say &lt;em&gt;"six months"&lt;/em&gt;. And the other person - from sales or marketing or some engineering director - says: &lt;em&gt;"We need it in three."&lt;/em&gt; What just happened is that you estimated in something that's not negotiable. In time, in this case. And the end result is that everyone is unhappy. You have other options, though. You can negotiate in something else than time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="management" label="management"/>
    <category term="software-development" label="software development"/>
    <category term="work-management" label="work management"/>
  </entry>
</feed>
