<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes</title>
  <id>https://smallsheds.garden/blog/feed.atom</id>
  <updated>2024-02-26T20:32:13Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/blog/feed.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>So you want to become a test engineer?</title>
    <id>https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/</id>
    <updated>2024-02-26T00:00:00+01:00</updated>
    <published>2024-02-26T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Becoming a test engineer these days is probably harder than it was for me back in 2006. Back then, there was no test automation, we worked in the slow rhythm of waterfall, and for years I was in a team with other testers or at least had a test manager to bounce ideas off. These days, there's a good chance none of these are true as you start as a test engineer.&lt;/p&gt;
&lt;p&gt;While most of these changes are good ones (please don't take test automation or agile away), it does make me empathize with anyone who starts their career as a test engineer today. The pace is higher and the skill set is broader. More importantly, you need to navigate your career while no one is really sure where to position testers in their organization. That's not a straightforward environment to start a career in.&lt;/p&gt;
&lt;p&gt;So here are four pieces of advice I'd give myself if I'd start my career in testing today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;testing can be many different things&lt;/li&gt;
&lt;li&gt;you're a software engineer that specializes in testing&lt;/li&gt;
&lt;li&gt;the end-game is leadership skills&lt;/li&gt;
&lt;li&gt;shape your career in a way that suits you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="career" label="career"/>
    <category term="leadership" label="leadership"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-interesting" label="software interesting"/>
  </entry>
  <entry>
    <title>Tackling test automation in a new language</title>
    <id>https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/</id>
    <updated>2024-02-11T00:00:00+01:00</updated>
    <published>2024-02-11T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;While there's value in learning all the ins-and-outs of one particular language, its ecosystem and its testing libraries, I think there's also a lot of value in having experience in several. Or at least, in two. If you only know one, you don't really know what's essential and what's incidental to the one set of tools you know. You don't know from experience in what ways things could be different.&lt;/p&gt;
&lt;p&gt;Picking up a new language is not trivial though, especially if it's your second one. There will be a lot to learn. You will notice similarities between the new language and the one(s) you already know. Sometimes those similarities will help you, sometimes they will mislead you.&lt;/p&gt;
&lt;p&gt;Also, it's more than picking up a new language. There are also the testing libraries you will use
and the language's ecosystem (e.g. how to install those libraries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; or how to set up a pre-commit hook with a linter). That's quite a package.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="programming" label="programming"/>
    <category term="test-automation" label="test automation"/>
  </entry>
  <entry>
    <title>Never estimate in something that's not negotiable</title>
    <id>https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/</id>
    <updated>2024-01-22T00:00:00+01:00</updated>
    <published>2024-01-22T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Estimates in software development are hard. There are good reasons not to estimate at all. Work in thin slices, keep cycle time low, and deliver at steady pace. And yet, it's still fair of others to ask: when will this big chunk of work be done? And not "maybe done", but "definitely-I-can-promise-this-to-people done".&lt;/p&gt;
&lt;p&gt;Ideally you can calculate an expected delivery date based on your current pace and the number of slices in the new big chunk of work. But maybe you don't have the slices yet. Or it's a new kind of work and your current pace won't really apply. Or there are upcoming changes in your team or organization that make any calculation tenuous.&lt;/p&gt;
&lt;p&gt;So you have to provide an estimate. And you do. You say &lt;em&gt;"six months"&lt;/em&gt;. And the other person - from sales or marketing or some engineering director - says: &lt;em&gt;"We need it in three."&lt;/em&gt; What just happened is that you estimated in something that's not negotiable. In time, in this case. And the end result is that everyone is unhappy. You have other options, though. You can negotiate in something else than time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="management" label="management"/>
    <category term="software-development" label="software development"/>
    <category term="work-management" label="work management"/>
  </entry>
  <entry>
    <title>A lesson from every language I've used</title>
    <id>https://smallsheds.garden/blog/2023/a-lesson-from-every-language-ive-used/</id>
    <updated>2023-12-29T00:00:00+01:00</updated>
    <published>2023-12-29T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/a-lesson-from-every-language-ive-used/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Throughout the years I've used quite a few different languages - if you allow me to be somewhat generous with the word "use". One language I actually feel proficient in. Some languages I've only done coding exercises in. And one language I've only used for a total of maybe 10 minutes, but that did really help out a whole team.&lt;/p&gt;
&lt;p&gt;I do believe we should be that generous, both towards ourselves and to others. For an industry that likes to talk about imposter syndrome, we seem to enjoy saying &lt;em&gt;"You're not a real ... unless..."&lt;/em&gt; a bit too much.&lt;/p&gt;
&lt;p&gt;Listing these languages for myself made me wonder what I had learned from them. Did I just learn how to write some code in each of them? Or did I also pick up some more general lessons? Turns out I did.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-lesson-from-every-language-ive-used/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>Old-school Scrum was rad!</title>
    <id>https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/</id>
    <updated>2023-12-18T00:00:00+01:00</updated>
    <published>2023-12-18T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;In 2001, nine years before the first version of the Scrum Guide, Ken Schwaber and Mike Beedle published &lt;em&gt;"Agile Software Development with Scrum"&lt;/em&gt;. This version of Scrum has some remarkable differences from even the &lt;a href="https://res.cloudinary.com/mitchlacey/image/upload/v1589750495/Scrum_Guide_v1_Scrum_Alliance_qe0y2w.pdf"&gt;first version of the Scrum Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The three things that struck me most about this version of Scrum, were&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrum Master is a management role, preferably by an engineer&lt;/li&gt;
&lt;li&gt;there is no retrospective, impediments are addressed in the Daily Scrum&lt;/li&gt;
&lt;li&gt;Sprints are 30 days and have a goal, tasks can be added and removed throughout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I don't want to claim we should return to this old-school version of Scrum, I do appreciate how radical it is compared to how software development is done - even today.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="books" label="books"/>
    <category term="scrum" label="scrum"/>
  </entry>
  <entry>
    <title>A good tester is all over the place</title>
    <id>https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/</id>
    <updated>2023-11-26T00:00:00+01:00</updated>
    <published>2023-11-26T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Over the past year, I've been thinking about how testing-related roles are still an unsolved problem in software development. We keep trying different permutations: shifting left and shifting right, being closer to the programmers while not too far from other testers, doing less testing ourselves so we can support others more, etc.&lt;/p&gt;
&lt;p&gt;And still, to be effective in any of these permutations, you can't let yourself be limited by them. You need to work both inside and outside the existing structures. You have to "be all over the place", in a good way.&lt;/p&gt;
&lt;h2&gt;Testers do testing&lt;/h2&gt;
&lt;p&gt;Let's start with a straightforward statement: a tester tests. Then what is testing? I &lt;a href="https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/"&gt;still like&lt;/a&gt; the definition &lt;em&gt;"Testing is investigating in order to evaluate a product."&lt;/em&gt; The most obvious thing to investigate, to test, is the code that is being written. The best way to do this, in my opinion, is through the combination of exploratory testing and test automation, i.e. what &lt;a href="https://maaretp.com/"&gt;Maaret Pyhäjärvi&lt;/a&gt; has named "&lt;a href="https://www.youtube.com/watch?v=T_67oQrPZhQ"&gt;contemporary exploratory testing&lt;/a&gt;". And to be clear, while the execution part tends to be the most visible, effective testing also needs good test strategy, design, and reporting.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="management" label="management"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-management" label="test management"/>
  </entry>
  <entry>
    <title>"Agile history, it matters, right?" at FroGS conf</title>
    <id>https://smallsheds.garden/blog/2023/agile-history-it-matters-right-at-frogs-conf/</id>
    <updated>2023-09-11T09:48:40+02:00</updated>
    <published>2023-09-11T09:48:40+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/agile-history-it-matters-right-at-frogs-conf/"/>
    <summary type="html">&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/agile-history/frogsconf.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;On September 9th I facilitated a session at the &lt;a href="https://frogsconf.nl/"&gt;FroGS conf&lt;/a&gt; open space titled "&lt;em&gt;Agile history, it matters, right?&lt;/em&gt;" My main goal was to get input on where to take my &lt;a href="https://context-of-agile.org/"&gt;Context of Agile&lt;/a&gt; site. Before asking for that input, however, I asked the participants three questions about the history of Agile. I figured it would provide a good introduction to the topic. And I was curious how much the kind of person that joins a session like this, knows about the history of Agile. So a big thank you to all the participants!&lt;/p&gt;
&lt;h2&gt;The three questions about the history of Agile&lt;/h2&gt;
&lt;p&gt;The three questions about the history of Agile were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When did Agile start?&lt;/li&gt;
&lt;li&gt;What lightweight methodologies were represented at the Manifesto meeting?&lt;/li&gt;
&lt;li&gt;What did the software development look like that Agile was reacting against?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/agile-history-it-matters-right-at-frogs-conf/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="agile-manifesto" label="agile manifesto"/>
    <category term="conferences" label="conferences"/>
  </entry>
  <entry>
    <title>My seven-month experiment of sharing weekly notes at work</title>
    <id>https://smallsheds.garden/blog/2023/my-seven-month-experiment-of-sharing-weekly-notes-at-work/</id>
    <updated>2023-09-03T12:35:40+02:00</updated>
    <published>2023-09-03T12:35:40+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/my-seven-month-experiment-of-sharing-weekly-notes-at-work/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;At the end of my first week at my last job I published a Notion page that started with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inspired by &lt;a href="https://agilecommshandbook.com/"&gt;"The agile comms handbook"&lt;/a&gt; I'm experimenting with a &lt;strong&gt;weekly (internal) blog&lt;/strong&gt;. No big promises on the content, just the things I feel like writing about at the end of my week. And as this is an experiment, things might change along the way.&lt;/p&gt;
&lt;p&gt;Please feel free to add a &lt;strong&gt;comment, respond&lt;/strong&gt; to other people's comments and/or &lt;strong&gt;share&lt;/strong&gt; with others!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post, I'll tell the story of my eight-month experiment with weekly notes. After that, I'll share some tips in case you want to give weekly notes a try too.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/my-seven-month-experiment-of-sharing-weekly-notes-at-work/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile-comms" label="agile comms"/>
    <category term="books" label="books"/>
    <category term="note-taking" label="note-taking"/>
  </entry>
  <entry>
    <title>Scrum master or scrum mascot?</title>
    <id>https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/</id>
    <updated>2023-08-23T13:17:40+02:00</updated>
    <published>2023-08-23T13:17:40+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/"/>
    <summary type="html">&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/scrum-master-or-scrum-mascot/scrum-master-quadrants.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;During our latest monthly call, &lt;a href="https://maaretp.com/"&gt;Maaret Pyhäjärvi&lt;/a&gt; and I spent some of our time discussing agency, accountability and scrum masters. At one point I said something along the lines of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scrum masters often end up as scrum mascots.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maaret said I should write a blog post about scrum mascots&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, so here we are.&lt;/p&gt;
&lt;p&gt;According to the &lt;a href="https://scrumguides.org/scrum-guide.html#scrum-master"&gt;2020 Scrum Guide&lt;/a&gt; a Scrum Master&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; is accountable for two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;"establishing Scrum as defined in the Scrum Guide"&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"the Scrum Team's effectiveness"&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Accountability implies (or rather: should imply) corresponding authority. You're being held accountable for certain outcomes *and* you have sufficient power to influence those outcomes. That's a scrum master. A scrum mascot is a very different beast: they have neither power nor accountability. And yet that seems to be what a lot of organizations (and scrum masters?) want.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="management" label="management"/>
    <category term="scrum" label="scrum"/>
  </entry>
  <entry>
    <title>What is a scrum master?</title>
    <id>https://smallsheds.garden/blog/2023/what-is-a-scrum-master/</id>
    <updated>2023-08-08T14:04:40+02:00</updated>
    <published>2023-08-08T14:04:40+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/what-is-a-scrum-master/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Recently I applied to two scrum master jobs and it got me thinking: what is a scrum master? What is it exactly that they do?&lt;/p&gt;
&lt;p&gt;What made this question even more pertinent to me (apart from the job applications) is that in the past I have been a scrum master. But that was five years ago and none of my jobs since had much involvement of a scrum master. And my experiences of those past five years made me wonder: where exactly does a scrum master fit in?&lt;/p&gt;
&lt;h2&gt;A scrum master is the Scrum boss&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://scrumguides.org/scrum-guide.html#scrum-master"&gt;The 2020 Scrum Guide&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Scrum Master is accountable for establishing Scrum as defined in the Scrum Guide. They do this by helping everyone understand Scrum theory and practice, both within the Scrum Team and the organization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/what-is-a-scrum-master/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="management" label="management"/>
    <category term="scrum" label="scrum"/>
  </entry>
</feed>
