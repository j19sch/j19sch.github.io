<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes</title>
  <id>https://smallsheds.garden/blog/feed.atom</id>
  <updated>2024-05-27T18:45:47Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/blog/feed.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>The difference between a test case and a requirement is the moment of discovery</title>
    <id>https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/</id>
    <updated>2024-05-27T00:00:00+02:00</updated>
    <published>2024-05-27T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;There are several straightforward ways to distinguish a test case from a requirement. A test case tells you how to check some kind of thing about the application, a requirement tells you that the application should do some kind of thing. A test case is written by a tester, a requirement by a business analyst. A test case takes the shape of an action and an evaluation of the result, a requirement takes the form of a sentence like "product ABC shall do XYZ."&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;A less straightforward, but more interesting way to distinguish a test case and a requirement, is this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference between a test case and a requirement is the moment of discovery.&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post I want to explore the meaning of that statement. In the next post I'll explore how looking at requirements and test cases in this way, can help us to do better testing. So this post will be a bit more philosophical, the next one more practical.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="exploratory-testing" label="exploratory testing"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="semantics" label="semantics"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-cases" label="test cases"/>
  </entry>
  <entry>
    <title>Two short checklists for Scrum</title>
    <id>https://smallsheds.garden/blog/2024/two-short-checklists-for-scrum/</id>
    <updated>2024-05-09T00:00:00+02:00</updated>
    <published>2024-05-09T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/two-short-checklists-for-scrum/"/>
    <summary type="html">&lt;h2 class="small"&gt;checklist no.1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Do you add acceptance criteria and story points to each ticket before planning?&lt;/li&gt;
&lt;li&gt;Do you have daily team meetings where people provide updates on their progress?&lt;/li&gt;
&lt;li&gt;After each iteration, do you report to stakeholders what work was done and what will be planned next?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="small"&gt;checklist no.2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Is the team protected during the sprint from stakeholders trying to interfere?&lt;/li&gt;
&lt;li&gt;Is a sprint focused on achieving a goal and is how that goal is achieved, left sufficiently open?&lt;/li&gt;
&lt;li&gt;Does the team address impediments as soon as they are discovered?&lt;/li&gt;
&lt;/ul&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="maturity" label="maturity"/>
    <category term="scrum" label="scrum"/>
  </entry>
  <entry>
    <title>The difference between a dead and an alive Agile Manifesto</title>
    <id>https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/</id>
    <updated>2024-04-02T00:00:00+02:00</updated>
    <published>2024-04-02T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;One of my favorite books on leadership is "Extreme Ownership" by Jocko Willink and Leif Babin. I can imagine some people bouncing off of the book because of the Navy SEAL angle, but to be honest I'm a bit of a sucker for the whole military leadership genre.&lt;/p&gt;
&lt;p&gt;The second part of "Extreme Ownership" covers four critical leadership concepts, the "Laws of Combat". Curiously enough, you can map these to the four values in the Agile Manifesto. These four concepts do come in a specific order, so you have to shuffle the Agile values around a little bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cover and Move maps to customer collaboration over contract negotiation.&lt;/li&gt;
&lt;li&gt;Simple maps to working software over comprehensive documentation.&lt;/li&gt;
&lt;li&gt;Prioritize and Execute maps to responding to change over following a plan.&lt;/li&gt;
&lt;li&gt;Decentralized Command maps to individuals and interactions over processes and tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To me this mapping is interesting in two ways. It sheds a different light on the four Agile values. And it's an example of how I think we should be engaging with the Agile Manifesto, in a way that keeps it alive.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="agile-manifesto" label="agile manifesto"/>
    <category term="books" label="books"/>
    <category term="values" label="values"/>
  </entry>
  <entry>
    <title>Notes from the March '24 FroGS conf open space</title>
    <id>https://smallsheds.garden/blog/2024/notes-from-the-march-24-frogs-conf-open-space/</id>
    <updated>2024-03-24T00:00:00+01:00</updated>
    <published>2024-03-24T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/notes-from-the-march-24-frogs-conf-open-space/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Yesterday &lt;a href="https://elizabethzagroba.com/"&gt;Elizabeth Zagroba&lt;/a&gt;, &lt;a href="https://www.huibschoots.nl/"&gt;Huib Schoots&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/techsannetized/"&gt;Sanne Visser&lt;/a&gt; and I ran another &lt;a href="https://frogsconf.nl"&gt;FroGS conf&lt;/a&gt; online open space. There were plenty of great sessions, below are some notes from the five sessions I participated in. Thank you to everyone who was there, I had a great time!&lt;/p&gt;
&lt;p&gt;If you want to join one of our next FroGS conf events, head over to &lt;a href="https://frogsconf.nl/"&gt;our site&lt;/a&gt; and &lt;a href="https://frogsconf.nl/register/"&gt;subscribe&lt;/a&gt; to our newsletter.&lt;/p&gt;
&lt;h2 class="small"&gt;From notes to shared documentation culture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Co-creation works for code. In what ways is co-creation for documentation different?&lt;/li&gt;
&lt;li&gt;Why do we talk about "an audience" for documentation, instead of about "the contributors"?&lt;/li&gt;
&lt;li&gt;The purpose of documentation flips from "what we build" to "what we built".&lt;/li&gt;
&lt;li&gt;Old research paper on documentation: only documentation with lasting usefulness is architecture and test cases. Everything else is just notes.&lt;/li&gt;
&lt;li&gt;Documentation heuristic: Is it easier/faster to reverse engineer it instead?&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/notes-from-the-march-24-frogs-conf-open-space/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary>
    <category term="conferences" label="conferences"/>
  </entry>
  <entry>
    <title>So you want to become a test engineer?</title>
    <id>https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/</id>
    <updated>2024-02-26T00:00:00+01:00</updated>
    <published>2024-02-26T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Becoming a test engineer these days is probably harder than it was for me back in 2006. Back then, there was no test automation, we worked in the slow rhythm of waterfall, and for years I was in a team with other testers or at least had a test manager to bounce ideas off. These days, there's a good chance none of these are true as you start as a test engineer.&lt;/p&gt;
&lt;p&gt;While most of these changes are good ones (please don't take test automation or agile away), it does make me empathize with anyone who starts their career as a test engineer today. The pace is higher and the skill set is broader. More importantly, you need to navigate your career while no one is really sure where to position testers in their organization. That's not a straightforward environment to start a career in.&lt;/p&gt;
&lt;p&gt;So here are four pieces of advice I'd give myself if I'd start my career in testing today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;testing can be many different things&lt;/li&gt;
&lt;li&gt;you're a software engineer that specializes in testing&lt;/li&gt;
&lt;li&gt;the end-game is leadership skills&lt;/li&gt;
&lt;li&gt;shape your career in a way that suits you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/so-you-want-to-become-a-test-engineer/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="career" label="career"/>
    <category term="leadership" label="leadership"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>Tackling test automation in a new language</title>
    <id>https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/</id>
    <updated>2024-02-11T00:00:00+01:00</updated>
    <published>2024-02-11T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;While there's value in learning all the ins-and-outs of one particular language, its ecosystem and its testing libraries, I think there's also a lot of value in having experience in several. Or at least, in two. If you only know one, you don't really know what's essential and what's incidental to the one set of tools you know. You don't know from experience in what ways things could be different.&lt;/p&gt;
&lt;p&gt;Picking up a new language is not trivial though, especially if it's your second one. There will be a lot to learn. You will notice similarities between the new language and the one(s) you already know. Sometimes those similarities will help you, sometimes they will mislead you.&lt;/p&gt;
&lt;p&gt;Also, it's more than picking up a new language. There are also the testing libraries you will use
and the language's ecosystem (e.g. how to install those libraries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; or how to set up a pre-commit hook with a linter). That's quite a package.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="programming" label="programming"/>
    <category term="test-automation" label="test automation"/>
  </entry>
  <entry>
    <title>Never estimate in something that's not negotiable</title>
    <id>https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/</id>
    <updated>2024-01-22T00:00:00+01:00</updated>
    <published>2024-01-22T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Estimates in software development are hard. There are good reasons not to estimate at all. Work in thin slices, keep cycle time low, and deliver at steady pace. And yet, it's still fair of others to ask: when will this big chunk of work be done? And not "maybe done", but "definitely-I-can-promise-this-to-people done".&lt;/p&gt;
&lt;p&gt;Ideally you can calculate an expected delivery date based on your current pace and the number of slices in the new big chunk of work. But maybe you don't have the slices yet. Or it's a new kind of work and your current pace won't really apply. Or there are upcoming changes in your team or organization that make any calculation tenuous.&lt;/p&gt;
&lt;p&gt;So you have to provide an estimate. And you do. You say &lt;em&gt;"six months"&lt;/em&gt;. And the other person - from sales or marketing or some engineering director - says: &lt;em&gt;"We need it in three."&lt;/em&gt; What just happened is that you estimated in something that's not negotiable. In time, in this case. And the end result is that everyone is unhappy. You have other options, though. You can negotiate in something else than time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="management" label="management"/>
    <category term="software-development" label="software development"/>
    <category term="work-management" label="work management"/>
  </entry>
  <entry>
    <title>A lesson from every language I've used</title>
    <id>https://smallsheds.garden/blog/2023/a-lesson-from-every-language-ive-used/</id>
    <updated>2023-12-29T00:00:00+01:00</updated>
    <published>2023-12-29T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/a-lesson-from-every-language-ive-used/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Throughout the years I've used quite a few different languages - if you allow me to be somewhat generous with the word "use". One language I actually feel proficient in. Some languages I've only done coding exercises in. And one language I've only used for a total of maybe 10 minutes, but that did really help out a whole team.&lt;/p&gt;
&lt;p&gt;I do believe we should be that generous, both towards ourselves and to others. For an industry that likes to talk about imposter syndrome, we seem to enjoy saying &lt;em&gt;"You're not a real ... unless..."&lt;/em&gt; a bit too much.&lt;/p&gt;
&lt;p&gt;Listing these languages for myself made me wonder what I had learned from them. Did I just learn how to write some code in each of them? Or did I also pick up some more general lessons? Turns out I did.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-lesson-from-every-language-ive-used/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>Old-school Scrum was rad!</title>
    <id>https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/</id>
    <updated>2023-12-18T00:00:00+01:00</updated>
    <published>2023-12-18T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;In 2001, nine years before the first version of the Scrum Guide, Ken Schwaber and Mike Beedle published &lt;em&gt;"Agile Software Development with Scrum"&lt;/em&gt;. This version of Scrum has some remarkable differences from even the &lt;a href="https://res.cloudinary.com/mitchlacey/image/upload/v1589750495/Scrum_Guide_v1_Scrum_Alliance_qe0y2w.pdf"&gt;first version of the Scrum Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The three things that struck me most about this version of Scrum, were&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrum Master is a management role, preferably by an engineer&lt;/li&gt;
&lt;li&gt;there is no retrospective, impediments are addressed in the Daily Scrum&lt;/li&gt;
&lt;li&gt;Sprints are 30 days and have a goal, tasks can be added and removed throughout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I don't want to claim we should return to this old-school version of Scrum, I do appreciate how radical it is compared to how software development is done - even today.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="books" label="books"/>
    <category term="scrum" label="scrum"/>
  </entry>
  <entry>
    <title>A good tester is all over the place</title>
    <id>https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/</id>
    <updated>2023-11-26T00:00:00+01:00</updated>
    <published>2023-11-26T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Over the past year, I've been thinking about how testing-related roles are still an unsolved problem in software development. We keep trying different permutations: shifting left and shifting right, being closer to the programmers while not too far from other testers, doing less testing ourselves so we can support others more, etc.&lt;/p&gt;
&lt;p&gt;And still, to be effective in any of these permutations, you can't let yourself be limited by them. You need to work both inside and outside the existing structures. You have to "be all over the place", in a good way.&lt;/p&gt;
&lt;h2&gt;Testers do testing&lt;/h2&gt;
&lt;p&gt;Let's start with a straightforward statement: a tester tests. Then what is testing? I &lt;a href="https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/"&gt;still like&lt;/a&gt; the definition &lt;em&gt;"Testing is investigating in order to evaluate a product."&lt;/em&gt; The most obvious thing to investigate, to test, is the code that is being written. The best way to do this, in my opinion, is through the combination of exploratory testing and test automation, i.e. what &lt;a href="https://maaretp.com/"&gt;Maaret Pyhäjärvi&lt;/a&gt; has named "&lt;a href="https://www.youtube.com/watch?v=T_67oQrPZhQ"&gt;contemporary exploratory testing&lt;/a&gt;". And to be clear, while the execution part tends to be the most visible, effective testing also needs good test strategy, design, and reporting.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="management" label="management"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-management" label="test management"/>
  </entry>
</feed>
