<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes (Posts about teaching)</title>
  <id>https://smallsheds.garden/categories/teaching.atom</id>
  <updated>2024-11-22T11:38:18Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/categories/teaching.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/categories/teaching/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>The Fluxx ensemble exercise</title>
    <id>https://smallsheds.garden/blog/2024/the-fluxx-ensemble-exercise/</id>
    <updated>2024-10-13T00:00:00+02:00</updated>
    <published>2024-10-13T00:00:00+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/the-fluxx-ensemble-exercise/"/>
    <summary type="html">&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2024/ensemble.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Earlier this week I ran a &lt;a href="https://hustef.hu/joep_schuurkes_2024/"&gt;full-day workshop&lt;/a&gt; at the excellent &lt;a href="https://hustef.hu/"&gt;HUSTEF&lt;/a&gt; conference on working in an ensemble (aka mob programming/testing or software teaming). As part of the workshop I tried out a new exercise, in which participants were allowed to change the rules of the ensemble. The goal was to experience why the basic rules of ensembling are the way they are and what happens if they are different.&lt;/p&gt;
&lt;p&gt;Since the participants really liked the exercise, I figured I'd write about it and name it: the Fluxx ensemble exercise. For those not familiar with &lt;a href="https://www.looneylabs.com/games/fluxx"&gt;Fluxx&lt;/a&gt;: it is a card game in which changing the rules is a key part of the game. It's one of my favourite games.&lt;/p&gt;
&lt;p&gt;Before I go into the exercise, though, I'll first need to explain the basic rules of ensembling.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-fluxx-ensemble-exercise/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="ensembling" label="ensembling"/>
    <category term="facilitation" label="facilitation"/>
    <category term="teaching" label="teaching"/>
    <category term="workshop" label="workshop"/>
  </entry>
  <entry>
    <title>The Agile Manifesto is a poor introduction to Agile</title>
    <id>https://smallsheds.garden/blog/2022/the-agile-manifesto-is-a-poor-introduction-to-agile/</id>
    <updated>2022-08-12T09:37:25+02:00</updated>
    <published>2022-08-12T09:37:25+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2022/the-agile-manifesto-is-a-poor-introduction-to-agile/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Last week &lt;a href="https://twitter.com/ezagroba"&gt;Elizabeth Zagroba&lt;/a&gt; &lt;a href="https://twitter.com/ezagroba/status/1557608861690912772"&gt;asked on Twitter&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If someone was completely new to working on software on an Agile team, what would you want them to read about Agile first?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My first thought was: "The Agile Manifesto!" After a second thought, though, I reconsidered and &lt;a href="https://twitter.com/j19sch/status/1557650105930579968"&gt;replied&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And I would recommend against reading the Agile Manifesto without consulting any secondary sources, except if you read it in the same way as you would visit a historical site "just to see where it all happened".&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I wrote this, I could not really put my finger on why exactly I felt this way. The best I could come up with was that the Agile Manifesto is hard to understand on its own. You need some historical context and practical experience to make sense of it. Serendipity came to the rescue, though, as I'm currently reading &lt;a href="https://en.wikipedia.org/wiki/Seeing_Like_a_State"&gt;&lt;em&gt;Seeing Like a State&lt;/em&gt;&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/James_C._Scott"&gt;James C. Scott&lt;/a&gt;. Chapter 9 of the book focuses on the Greek concept of &lt;em&gt;mētis&lt;/em&gt; (μῆτις) and how it relates to rules of thumb. Turns out that this explains why the Agile Manifesto is a poor introduction to Agile.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/the-agile-manifesto-is-a-poor-introduction-to-agile/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="agile-manifesto" label="agile manifesto"/>
    <category term="books" label="books"/>
    <category term="metis" label="mētis"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>An approach to teaching Agile 20 years after the Agile Manifesto</title>
    <id>https://smallsheds.garden/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/</id>
    <updated>2021-04-26T16:54:34+02:00</updated>
    <published>2021-04-26T16:54:34+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;For a few weeks I've been thinking about how I would teach Agile&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; in 2021, 20 years after the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; was published. After sharing my thoughts at &lt;a href="https://citconf.com/virtual2021/"&gt;CitCon Europe 2021 Virtual&lt;/a&gt; and having an interesting conversation about the state of Agile and how to teach it, I figured it's time to write a blog post about it.&lt;/p&gt;
&lt;h3&gt;Why I started thinking about this&lt;/h3&gt;
&lt;p&gt;As Allan Kelly stated in a &lt;a href="https://www.allankellyassociates.co.uk/archives/2762/agile-won-the-war-but-lost-the-peace/"&gt;2018 blog post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Agile won the war but lost the peace."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everyone is doing Agile, even though very few people are living the dream promised by Agile. This makes it very difficult to use "Agile" as a label, as a name for something. When someone says "Agile", are they referring to what you're already doing or to something they think you should be doing?&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; was &lt;a href="https://agilemanifesto.org/history.html"&gt;written in 2001&lt;/a&gt;, based on what its authors were doing in the 1990s in response to the common ways of doing software development of that time. And since the Manifesto we've seen the introduction of Lean, of DevOps, and of CI/CD. So the amount of history that comes with Agile is large and it raises the question how much (if any) we should teach - especially since a lot of it is folklore instead of history&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Doing Agile's history justice would probably cost more time than makes sense if your goal is to teach people how to develop software in an Agile way&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. And a lot of that history was a relatively long time ago, which is why I titled my CitCon session "Teaching Agile to people younger than the Manifesto".&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="books" label="books"/>
    <category term="cicd" label="ci/cd"/>
    <category term="devops" label="devops"/>
    <category term="lean" label="lean"/>
    <category term="teaching" label="teaching"/>
  </entry>
  <entry>
    <title>VIPT - how to teach software testing</title>
    <id>https://smallsheds.garden/blog/2012/vipt-how-to-teach-software-testing/</id>
    <updated>2012-07-29T16:24:51+02:00</updated>
    <published>2012-07-29T16:24:51+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2012/vipt-how-to-teach-software-testing/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;In this final post on VIPT (Value-Information-Processes-Tools) it's time to take a look at teaching software testing. My previous posts on VIPT can be found &lt;a href="https://smallsheds.garden/blog/2012/yet-another-testing-model-value-information-processes-value/"&gt;here&lt;/a&gt;, &lt;a href="https://smallsheds.garden/blog/2012/vipt-intermezzo-models-and-the-unix-philosophy/"&gt;here&lt;/a&gt; and &lt;a href="https://smallsheds.garden/blog/2012/vipt-bottom-up-or-top-down/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;A typical software testing course&lt;/h3&gt;
&lt;p&gt;A typical traditional software testing course (at least in the way I have taught them) has three elements: theory, stories and exercises.&lt;/p&gt;
&lt;p&gt;The first element is all about definitions (testing, test cases, defects, etc.), process descriptions and testing techniques (mostly test design). So basically what happens is that students get a brief introduction about testing in general and then we move on to the main part: teaching a specifc testing method.&lt;/p&gt;
&lt;p&gt;The second element of the course are the stories. These are mostly stories aobut how testing in the real world does not work as described in the theory. At best they are stories containing all four elements of VIPT. Most of the time, however, they are just real-world examples of a certain definition or technique.&lt;/p&gt;
&lt;p&gt;Finally, there are exercises. As with the techniques, these are mostly about test design. Unfortunately they are also very linear. There is only one correct answer and often only one correct way to get to that answer. So the main gist seems to be: "I taught you a trick, now show me you can perform the trick." But shouldn't learning about testing be more than learning to jump through a hoop on command?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2012/vipt-how-to-teach-software-testing/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="context-driven-testing" label="context-driven testing"/>
    <category term="models" label="models"/>
    <category term="teaching" label="teaching"/>
    <category term="vipt" label="VIPT"/>
  </entry>
</feed>
