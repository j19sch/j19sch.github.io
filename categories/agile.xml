<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes (Posts about agile)</title><link>https://smallsheds.garden/</link><description></description><atom:link href="https://smallsheds.garden/categories/agile.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:site@joep.slmail.me"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow" target="_blank"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://licensebuttons.net/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Tue, 02 Apr 2024 19:35:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The difference between a dead and an alive Agile Manifesto</title><link>https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;One of my favorite books on leadership is "Extreme Ownership" by Jocko Willink and Leif Babin. I can imagine some people bouncing off of the book because of the Navy SEAL angle, but to be honest I'm a bit of a sucker for the whole military leadership genre.&lt;/p&gt;
&lt;p&gt;The second part of "Extreme Ownership" covers four critical leadership concepts, the "Laws of Combat". Curiously enough, you can map these to the four values in the Agile Manifesto. These four concepts do come in a specific order, so you have to shuffle the Agile values around a little bit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cover and Move maps to customer collaboration over contract negotiation.&lt;/li&gt;
&lt;li&gt;Simple maps to working software over comprehensive documentation.&lt;/li&gt;
&lt;li&gt;Prioritize and Execute maps to responding to change over following a plan.&lt;/li&gt;
&lt;li&gt;Decentralized Command maps to individuals and interactions over processes and tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To me this mapping is interesting in two ways. It sheds a different light on the four Agile values. And it's an example of how I think we should be engaging with the Agile Manifesto, in a way that keeps it alive.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>agile manifesto</category><category>books</category><category>values</category><guid>https://smallsheds.garden/blog/2024/the-difference-between-a-dead-and-an-alive-agile-manifesto/</guid><pubDate>Mon, 01 Apr 2024 22:00:00 GMT</pubDate></item><item><title>Tackling test automation in a new language</title><link>https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;While there's value in learning all the ins-and-outs of one particular language, its ecosystem and its testing libraries, I think there's also a lot of value in having experience in several. Or at least, in two. If you only know one, you don't really know what's essential and what's incidental to the one set of tools you know. You don't know from experience in what ways things could be different.&lt;/p&gt;
&lt;p&gt;Picking up a new language is not trivial though, especially if it's your second one. There will be a lot to learn. You will notice similarities between the new language and the one(s) you already know. Sometimes those similarities will help you, sometimes they will mislead you.&lt;/p&gt;
&lt;p&gt;Also, it's more than picking up a new language. There are also the testing libraries you will use
and the language's ecosystem (e.g. how to install those libraries&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; or how to set up a pre-commit hook with a linter). That's quite a package.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>programming</category><category>test automation</category><guid>https://smallsheds.garden/blog/2024/tackling-test-automation-in-a-new-language/</guid><pubDate>Sat, 10 Feb 2024 23:00:00 GMT</pubDate></item><item><title>Never estimate in something that's not negotiable</title><link>https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Estimates in software development are hard. There are good reasons not to estimate at all. Work in thin slices, keep cycle time low, and deliver at steady pace. And yet, it's still fair of others to ask: when will this big chunk of work be done? And not "maybe done", but "definitely-I-can-promise-this-to-people done".&lt;/p&gt;
&lt;p&gt;Ideally you can calculate an expected delivery date based on your current pace and the number of slices in the new big chunk of work. But maybe you don't have the slices yet. Or it's a new kind of work and your current pace won't really apply. Or there are upcoming changes in your team or organization that make any calculation tenuous.&lt;/p&gt;
&lt;p&gt;So you have to provide an estimate. And you do. You say &lt;em&gt;"six months"&lt;/em&gt;. And the other person - from sales or marketing or some engineering director - says: &lt;em&gt;"We need it in three."&lt;/em&gt; What just happened is that you estimated in something that's not negotiable. In time, in this case. And the end result is that everyone is unhappy. You have other options, though. You can negotiate in something else than time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>management</category><category>software development</category><category>work management</category><guid>https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/</guid><pubDate>Sun, 21 Jan 2024 23:00:00 GMT</pubDate></item><item><title>Old-school Scrum was rad!</title><link>https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In 2001, nine years before the first version of the Scrum Guide, Ken Schwaber and Mike Beedle published &lt;em&gt;"Agile Software Development with Scrum"&lt;/em&gt;. This version of Scrum has some remarkable differences from even the &lt;a href="https://res.cloudinary.com/mitchlacey/image/upload/v1589750495/Scrum_Guide_v1_Scrum_Alliance_qe0y2w.pdf"&gt;first version of the Scrum Guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The three things that struck me most about this version of Scrum, were&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrum Master is a management role, preferably by an engineer&lt;/li&gt;
&lt;li&gt;there is no retrospective, impediments are addressed in the Daily Scrum&lt;/li&gt;
&lt;li&gt;Sprints are 30 days and have a goal, tasks can be added and removed throughout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I don't want to claim we should return to this old-school version of Scrum, I do appreciate how radical it is compared to how software development is done - even today.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>books</category><category>scrum</category><guid>https://smallsheds.garden/blog/2023/old-school-scrum-was-rad/</guid><pubDate>Sun, 17 Dec 2023 23:00:00 GMT</pubDate></item><item><title>"Agile history, it matters, right?" at FroGS conf</title><link>https://smallsheds.garden/blog/2023/agile-history-it-matters-right-at-frogs-conf/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/agile-history/frogsconf.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;On September 9th I facilitated a session at the &lt;a href="https://frogsconf.nl/"&gt;FroGS conf&lt;/a&gt; open space titled "&lt;em&gt;Agile history, it matters, right?&lt;/em&gt;" My main goal was to get input on where to take my &lt;a href="https://context-of-agile.org/"&gt;Context of Agile&lt;/a&gt; site. Before asking for that input, however, I asked the participants three questions about the history of Agile. I figured it would provide a good introduction to the topic. And I was curious how much the kind of person that joins a session like this, knows about the history of Agile. So a big thank you to all the participants!&lt;/p&gt;
&lt;h2&gt;The three questions about the history of Agile&lt;/h2&gt;
&lt;p&gt;The three questions about the history of Agile were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When did Agile start?&lt;/li&gt;
&lt;li&gt;What lightweight methodologies were represented at the Manifesto meeting?&lt;/li&gt;
&lt;li&gt;What did the software development look like that Agile was reacting against?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/agile-history-it-matters-right-at-frogs-conf/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>agile manifesto</category><category>conferences</category><guid>https://smallsheds.garden/blog/2023/agile-history-it-matters-right-at-frogs-conf/</guid><pubDate>Mon, 11 Sep 2023 07:48:40 GMT</pubDate></item><item><title>Scrum master or scrum mascot?</title><link>https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/scrum-master-or-scrum-mascot/scrum-master-quadrants.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;During our latest monthly call, &lt;a href="https://maaretp.com/"&gt;Maaret Pyhäjärvi&lt;/a&gt; and I spent some of our time discussing agency, accountability and scrum masters. At one point I said something along the lines of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scrum masters often end up as scrum mascots.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maaret said I should write a blog post about scrum mascots&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, so here we are.&lt;/p&gt;
&lt;p&gt;According to the &lt;a href="https://scrumguides.org/scrum-guide.html#scrum-master"&gt;2020 Scrum Guide&lt;/a&gt; a Scrum Master&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; is accountable for two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;"establishing Scrum as defined in the Scrum Guide"&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"the Scrum Team's effectiveness"&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Accountability implies (or rather: should imply) corresponding authority. You're being held accountable for certain outcomes *and* you have sufficient power to influence those outcomes. That's a scrum master. A scrum mascot is a very different beast: they have neither power nor accountability. And yet that seems to be what a lot of organizations (and scrum masters?) want.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>management</category><category>scrum</category><guid>https://smallsheds.garden/blog/2023/scrum-master-or-scrum-mascot/</guid><pubDate>Wed, 23 Aug 2023 11:17:40 GMT</pubDate></item><item><title>What is a scrum master?</title><link>https://smallsheds.garden/blog/2023/what-is-a-scrum-master/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I applied to two scrum master jobs and it got me thinking: what is a scrum master? What is it exactly that they do?&lt;/p&gt;
&lt;p&gt;What made this question even more pertinent to me (apart from the job applications) is that in the past I have been a scrum master. But that was five years ago and none of my jobs since had much involvement of a scrum master. And my experiences of those past five years made me wonder: where exactly does a scrum master fit in?&lt;/p&gt;
&lt;h2&gt;A scrum master is the Scrum boss&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://scrumguides.org/scrum-guide.html#scrum-master"&gt;The 2020 Scrum Guide&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Scrum Master is accountable for establishing Scrum as defined in the Scrum Guide. They do this by helping everyone understand Scrum theory and practice, both within the Scrum Team and the organization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/what-is-a-scrum-master/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>management</category><category>scrum</category><guid>https://smallsheds.garden/blog/2023/what-is-a-scrum-master/</guid><pubDate>Tue, 08 Aug 2023 12:04:40 GMT</pubDate></item><item><title>I'm a quality engineer and I'm not sure how I feel about that</title><link>https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is a slightly edited version of the experience report I &lt;a class="reference external" href="https://smallsheds.garden/slides/xp2023-quality-engineer.html"&gt;presented&lt;/a&gt; at the &lt;a class="reference external" href="https://www.agilealliance.org/xp2023/"&gt;xp2023&lt;/a&gt; conference. It covers my first six months at a scale-up, working as a quality engineer for the first time - after having worked in other testing-related roles for 15+ years.&lt;/p&gt;
&lt;p&gt;My main finding is that for a quality engineering role to work well, certain structures need to be in place. The most important one is that the impact the quality engineer is expected to have, is clear to both the quality engineer and the team(s) they are supporting. However, regardless of which structures you put in place, a quality engineer will also need to work around those structures to be fully effective.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/"&gt;Read more…&lt;/a&gt; (22 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>conferences</category><category>leadership</category><category>management</category><category>quality engineering</category><category>software testing</category><guid>https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/</guid><pubDate>Wed, 05 Jul 2023 09:42:34 GMT</pubDate></item><item><title>A backlog item is a backlog item is a backlog item</title><link>https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Originally Scrum was very much about &lt;em&gt;"You tell us what needs building. We'll decide how we build it and how soon we'll deliver."&lt;/em&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; I've never seen that version of Scrum. The version I have seen, has a product manager try to get as many features into a sprint as reasonably possible - for varying degrees of reasonable. This comes at the expense of maintenance work, such as keeping libraries up-to-date or removing technical debt. And it incentivizes the team to cut corners on features, to not leave code in a better state than they found it, to not fix smaller bugs and instead log them somewhere for later.&lt;/p&gt;
&lt;p&gt;One solution I see to this problem, is to put an engineering manager fully in charge of the team.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:5"&gt;2&lt;/a&gt;&lt;/sup&gt; The product manager prioritizes the features. The engineering manager prioritizes the full scope of work for the team. That's not a simple change to pull off, however.&lt;/p&gt;
&lt;p&gt;Another solution might be to change the way we use our backlogs. If a product manager gets to prioritize all the work, and the tool they use is a backlog, then we should make sure that all the work&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:2"&gt;3&lt;/a&gt;&lt;/sup&gt; is in the backlog: features, bugs, and technical debt. Let's take a look at each of these three categories of work.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>bugs</category><category>tech debt</category><category>work management</category><guid>https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/</guid><pubDate>Mon, 03 Apr 2023 06:51:25 GMT</pubDate></item><item><title>Our work management tools are limiting our imagination</title><link>https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/work-mgt-tools/fig4-stories-on-a-wall.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Several weeks ago I had a thought that felt both serious and not serious, so &lt;a href="https://chaos.social/@joeposaurus/109635747014542350"&gt;I asked on Mastodon&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should I write a blog post about companies leaving money on the table by not leveraging their choice of work management tool (Jira, Shortcut, etc) as a competitive advantage?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;31% said "yes" and 54% said "a post about what now?", which I suppose reflects my own feelings about the topic. And it motivated me to write this post - especially that 54%. So let's talk about work management tools, the original (user) stories, affordances and constraints, and how these tools are limiting our imagination. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>agile manifesto</category><category>quality engineering</category><category>software development</category><category>tools</category><category>work management</category><guid>https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/</guid><pubDate>Sun, 29 Jan 2023 21:34:25 GMT</pubDate></item></channel></rss>