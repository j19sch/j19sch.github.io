<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes (Posts about quality engineering)</title><link>https://smallsheds.garden/</link><description></description><atom:link href="https://smallsheds.garden/categories/cat_quality-engineering.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:site@joep.slmail.me"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" rel="nofollow" target="_blank"&gt;
&lt;img alt="Creative Commons BY-NC License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://licensebuttons.net/l/by-nc/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sun, 10 Aug 2025 13:24:27 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How essential are your testers?</title><link>https://smallsheds.garden/blog/2025/how-essential-are-your-testers/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;A question I don't seem to be able to let go of is: where does a tester fit into a software development team? More specifically, how essential are testers to the team?&lt;/p&gt;
&lt;p&gt;I think that there are basically three options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your testers do not add something essential.&lt;/li&gt;
&lt;li&gt;It's not clear if your testers add something essential.&lt;/li&gt;
&lt;li&gt;Your testers do add something essential.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class="small"&gt;Your testers do not add something essential&lt;/h2&gt;
&lt;p&gt;I suspect this is becoming more and more common. Thanks to Agile, CI/CD, DevOps, improved tooling and changing expectations, you should not have testers that find the dumb bugs I was expected to find at the start of my career. If a programmer wrote a &lt;code&gt;&amp;gt;&lt;/code&gt; where it should have been a &lt;code&gt;&amp;gt;=&lt;/code&gt;, we should expect a unit test and not a tester to catch it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2025/how-essential-are-your-testers/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>career</category><category>management</category><category>quality engineering</category><category>software testing</category><category>teaching</category><category>test management</category><guid>https://smallsheds.garden/blog/2025/how-essential-are-your-testers/</guid><pubDate>Tue, 20 May 2025 22:00:00 GMT</pubDate></item><item><title>Optimizing for moments of discovery</title><link>https://smallsheds.garden/blog/2025/optimizing-for-moments-of-discovery/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;This is the third post in a three-part series about my statement "The difference between a test case and a requirement is the moment of discovery."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last year I wrote about how &lt;a href="https://smallsheds.garden/blog/2024/the-difference-between-a-test-case-and-a-requirement-is-the-moment-of-discovery/"&gt;the difference between a requirement and a test case is the moment of discovery&lt;/a&gt;. And how that means that we should &lt;a href="https://smallsheds.garden/blog/2024/being-intentional-about-exploratory-testing/"&gt;be intentional about our exploratory testing&lt;/a&gt;. Exploratory testing is just one example of a bigger idea, though: optimizing for moments of discovery.&lt;/p&gt;
&lt;p&gt;So what does that mean, optimizing for moments of discovery? Don't those moments just happen? Isn't that what serendipity is all about? I think it's fair to say that you can't make moments of discovery happen. You &lt;em&gt;can&lt;/em&gt; make them more likely to happen. That you &lt;em&gt;can&lt;/em&gt; optimize for.&lt;/p&gt;
&lt;p&gt;Before I go into two practices to optimize for these moments of discovery, I want to talk more generally about moving the moment of discovery, either earlier or later, for both requirements and test cases, i.e. for design and test. Because the two practices will do exactly that: moving the moment of discovery.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2025/optimizing-for-moments-of-discovery/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>elephant carpaccio</category><category>quality engineering</category><category>software development</category><category>software testing</category><guid>https://smallsheds.garden/blog/2025/optimizing-for-moments-of-discovery/</guid><pubDate>Sat, 15 Feb 2025 23:00:00 GMT</pubDate></item><item><title>A good tester is all over the place</title><link>https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Over the past year, I've been thinking about how testing-related roles are still an unsolved problem in software development. We keep trying different permutations: shifting left and shifting right, being closer to the programmers while not too far from other testers, doing less testing ourselves so we can support others more, etc.&lt;/p&gt;
&lt;p&gt;And still, to be effective in any of these permutations, you can't let yourself be limited by them. You need to work both inside and outside the existing structures. You have to "be all over the place", in a good way.&lt;/p&gt;
&lt;h2&gt;Testers do testing&lt;/h2&gt;
&lt;p&gt;Let's start with a straightforward statement: a tester tests. Then what is testing? I &lt;a href="https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/"&gt;still like&lt;/a&gt; the definition &lt;em&gt;"Testing is investigating in order to evaluate a product."&lt;/em&gt; The most obvious thing to investigate, to test, is the code that is being written. The best way to do this, in my opinion, is through the combination of exploratory testing and test automation, i.e. what &lt;a href="https://maaretp.com/"&gt;Maaret Pyhäjärvi&lt;/a&gt; has named "&lt;a href="https://www.youtube.com/watch?v=T_67oQrPZhQ"&gt;contemporary exploratory testing&lt;/a&gt;". And to be clear, while the execution part tends to be the most visible, effective testing also needs good test strategy, design, and reporting.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>management</category><category>quality engineering</category><category>software development</category><category>software testing</category><category>test management</category><guid>https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/</guid><pubDate>Sat, 25 Nov 2023 23:00:00 GMT</pubDate></item><item><title>I'm a quality engineer and I'm not sure how I feel about that</title><link>https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is a slightly edited version of the experience report I &lt;a class="reference external" href="https://smallsheds.garden/slides/xp2023-quality-engineer.html"&gt;presented&lt;/a&gt; at the &lt;a class="reference external" href="https://www.agilealliance.org/xp2023/"&gt;xp2023&lt;/a&gt; conference. It covers my first six months at a scale-up, working as a quality engineer for the first time - after having worked in other testing-related roles for 15+ years.&lt;/p&gt;
&lt;p&gt;My main finding is that for a quality engineering role to work well, certain structures need to be in place. The most important one is that the impact the quality engineer is expected to have, is clear to both the quality engineer and the team(s) they are supporting. However, regardless of which structures you put in place, a quality engineer will also need to work around those structures to be fully effective.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/"&gt;Read more…&lt;/a&gt; (22 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>conferences</category><category>leadership</category><category>management</category><category>quality engineering</category><category>software testing</category><guid>https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/</guid><pubDate>Wed, 05 Jul 2023 09:42:34 GMT</pubDate></item><item><title>Three lessons after three months of quality engineering</title><link>https://smallsheds.garden/blog/2022/three-lessons-after-three-months-of-quality-engineering/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Three months ago I started a new job as a quality engineer, supporting two teams. So far it's been an interesting challenge. The two teams were formed only a few months before I joined, although some team members had been working for the company before that. Each team has their own product manager. We also have an engineering manager, but he joined only two weeks before I did. And then I was added to the mix, with a job description that didn't give a lot more guidance than: support the team in things related to testing and quality.&lt;/p&gt;
&lt;p&gt;So my first task in my new job was figuring out what my job was. Or rather, figure out what concrete things I could do that fit that job description. This was not made easier by the fact that we're a fully remote company. Not being in the same space throughout the day does make things harder when you're trying to find your place. Reflecting on the past three months made me realize there are three things that are really important: visibility, connections, and patience.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/three-lessons-after-three-months-of-quality-engineering/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>quality engineering</category><category>skills</category><category>small steps</category><guid>https://smallsheds.garden/blog/2022/three-lessons-after-three-months-of-quality-engineering/</guid><pubDate>Sun, 27 Nov 2022 15:41:25 GMT</pubDate></item><item><title>Agile tester or quality engineer, who's to say?</title><link>https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In her article &lt;a href="https://web.archive.org/web/20041001003124/http://www.qualitytree.com/feature/btwq.pdf"&gt;"Better Testing, Worse Quality?"&lt;/a&gt; &lt;a href="https://ruby.social/@testobsessed"&gt;Elisabeth Hendrickson&lt;/a&gt; makes an interesting case about independent testing, i.e. testing done by an independent test team. She discovered that beyond a certain point, investigating more in independent testing will make both quality and speed go down, not up. In &lt;a href="https://itrevolution.com/podcast/the-idealcast-episode-3/"&gt;episode 3&lt;/a&gt; of the &lt;a href="https://itrevolution.com/podcast/"&gt;Idealcast&lt;/a&gt;, she summarizes her article as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"[...] when you ramp up the amount of investment in an independent test group, then given the amount of pressure that's already on the developers to deliver, it is so easy&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; for the developers to say, this isn't my problem anymore. Thank goodness we've got the professionals over here. It's their job to test." &lt;em&gt;(00:11:21)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later in the article, Elisabeth Hendrickson gives advice on how to avoid or escape this spiral of decreasing quality and speed. There are four dials you can turn either up or down:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>quality engineering</category><category>software testing</category><guid>https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/</guid><pubDate>Sun, 06 Nov 2022 15:29:25 GMT</pubDate></item><item><title>Testing maturity in an agile/CDT context</title><link>https://smallsheds.garden/blog/2017/testing-maturity-in-an-agilecdt-context/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;One day during a team meeting at Joep's previous job at a bank the Team Manager of Testing, listed a number of topics his testers could work on in the coming months. One of those topics was "testing maturity". This topic was on the list not because this manager was such a fan of maturity models, but because the other team managers (Business Analysis and Development) had produced one for their own teams and higher management would like to have one for testing as well. And although Joep saw little value in a classic five-tiered maturity model either, he was intrigued by the question: so what can you do with respect to maturity models that is of value?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2017/testing-maturity-in-an-agilecdt-context/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>context-driven testing</category><category>maturity</category><guid>https://smallsheds.garden/blog/2017/testing-maturity-in-an-agilecdt-context/</guid><pubDate>Sun, 05 Feb 2017 16:43:10 GMT</pubDate></item></channel></rss>