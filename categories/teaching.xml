<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes (Posts about teaching)</title><link>https://j19sch.github.io/</link><description></description><atom:link href="https://j19sch.github.io/categories/teaching.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:j19sch@hey.com"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sat, 15 May 2021 14:42:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>An approach to teaching Agile 20 years after the Agile Manifesto</title><link>https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;For a few weeks I've been thinking about how I would teach Agile&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; in 2021, 20 years after the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; was published. After sharing my thoughts at &lt;a href="https://citconf.com/virtual2021/"&gt;CitCon Europe 2021 Virtual&lt;/a&gt; and having an interesting conversation about the state of Agile and how to teach it, I feel it's time to share my thoughts here as well.&lt;/p&gt;
&lt;h3&gt;Why I started thinking about this&lt;/h3&gt;
&lt;p&gt;As Allan Kelly stated in a &lt;a href="https://www.allankellyassociates.co.uk/archives/2762/agile-won-the-war-but-lost-the-peace/"&gt;2018 blog post&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Agile won the war but lost the peace."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Everyone is doing Agile, even though very few people are living the dream promised by Agile. This makes it very difficult to use "Agile" as a label, as a name for something. When someone says "Agile", are they referring to what you're already doing or to something they think you should be doing?&lt;/p&gt;
&lt;p&gt;Additionally, the &lt;a href="https://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt; was &lt;a href="https://agilemanifesto.org/history.html"&gt;written in 2001&lt;/a&gt;, based on what its authors were doing in the 1990s in response to the common ways of doing software development of that time. And since the Manifesto we've seen the introduction of Lean, of DevOps, and of CI/CD. So the amount of history that comes with Agile is large and it raises the question how much (if any) we should teach - especially since a lot of it is folklore instead of history&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;. Doing Agile's history justice would probably cost more time than makes sense if your goal is to teach people how to develop software in an Agile way&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt;. And a lot of that history was a relatively long time ago, which is why I titled my CitCon session "Teaching Agile to people younger than the Manifesto".&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>ci/cd</category><category>devops</category><category>lean</category><category>teaching</category><guid>https://j19sch.github.io/blog/2021/an-approach-to-teaching-agile-20-years-after-the-agile-manifesto/</guid><pubDate>Mon, 26 Apr 2021 14:54:34 GMT</pubDate></item><item><title>VIPT - how to teach software testing</title><link>https://j19sch.github.io/blog/2012/vipt-how-to-teach-software-testing/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In this final post on VIPT (Value-Information-Processes-Tools) it's time to take a look at teaching software testing. My previous posts on VIPT can be found &lt;a href="https://j19sch.github.io/blog/2012/yet-another-testing-model-value-information-processes-value/"&gt;here&lt;/a&gt;, &lt;a href="https://j19sch.github.io/blog/2012/vipt-intermezzo-models-and-the-unix-philosophy/"&gt;here&lt;/a&gt; and &lt;a href="https://j19sch.github.io/blog/2012/vipt-bottom-up-or-top-down/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;A typical software testing course&lt;/h3&gt;
&lt;p&gt;A typical traditional software testing course (at least in the way I have taught them) has three elements: theory, stories and exercises.&lt;/p&gt;
&lt;p&gt;The first element is all about definitions (testing, test cases, defects, etc.), process descriptions and testing techniques (mostly test design). So basically what happens is that students get a brief introduction about testing in general and then we move on to the main part: teaching a specifc testing method.&lt;/p&gt;
&lt;p&gt;The second element of the course are the stories. These are mostly stories aobut how testing in the real world does not work as described in the theory. At best they are stories containing all four elements of VIPT. Most of the time, however, they are just real-world examples of a certain definition or technique.&lt;/p&gt;
&lt;p&gt;Finally, there are exercises. As with the techniques, these are mostly about test design. Unfortunately they are also very linear. There is only one correct answer and often only one correct way to get to that answer. So the main gist seems to be: "I taught you a trick, now show me you can perform the trick." But shouldn't learning about testing be more than learning to jump through a hoop on command?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2012/vipt-how-to-teach-software-testing/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>context-driven testing</category><category>models</category><category>teaching</category><category>VIPT</category><guid>https://j19sch.github.io/blog/2012/vipt-how-to-teach-software-testing/</guid><pubDate>Sun, 29 Jul 2012 14:24:51 GMT</pubDate></item></channel></rss>