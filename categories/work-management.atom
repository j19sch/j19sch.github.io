<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes (Posts about work management)</title>
  <id>https://smallsheds.garden/categories/work-management.atom</id>
  <updated>2024-01-22T18:14:22Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/categories/work-management.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/categories/work-management/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Never estimate in something that's not negotiable</title>
    <id>https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/</id>
    <updated>2024-01-22T00:00:00+01:00</updated>
    <published>2024-01-22T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Estimates in software development are hard. There are good reasons not to estimate at all. Work in thin slices, keep cycle time low, and deliver at steady pace. And yet, it's still fair of others to ask: when will this big chunk of work be done? And not "maybe done", but "definitely-I-can-promise-this-to-people done".&lt;/p&gt;
&lt;p&gt;Ideally you can calculate an expected delivery date based on your current pace and the number of slices in the new big chunk of work. But maybe you don't have the slices yet. Or it's a new kind of work and your current pace won't really apply. Or there are upcoming changes in your team or organization that make any calculation tenuous.&lt;/p&gt;
&lt;p&gt;So you have to provide an estimate. And you do. You say &lt;em&gt;"six months"&lt;/em&gt;. And the other person - from sales or marketing or some engineering director - says: &lt;em&gt;"We need it in three."&lt;/em&gt; What just happened is that you estimated in something that's not negotiable. In time, in this case. And the end result is that everyone is unhappy. You have other options, though. You can negotiate in something else than time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2024/never-estimate-in-something-thats-not-negotiable/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="management" label="management"/>
    <category term="software-development" label="software development"/>
    <category term="work-management" label="work management"/>
  </entry>
  <entry>
    <title>A backlog item is a backlog item is a backlog item</title>
    <id>https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/</id>
    <updated>2023-04-03T08:51:25+02:00</updated>
    <published>2023-04-03T08:51:25+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Originally Scrum was very much about &lt;em&gt;"You tell us what needs building. We'll decide how we build it and how soon we'll deliver."&lt;/em&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; I've never seen that version of Scrum. The version I have seen, has a product manager try to get as many features into a sprint as reasonably possible - for varying degrees of reasonable. This comes at the expense of maintenance work, such as keeping libraries up-to-date or removing technical debt. And it incentivizes the team to cut corners on features, to not leave code in a better state than they found it, to not fix smaller bugs and instead log them somewhere for later.&lt;/p&gt;
&lt;p&gt;One solution I see to this problem, is to put an engineering manager fully in charge of the team.&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:5"&gt;2&lt;/a&gt;&lt;/sup&gt; The product manager prioritizes the features. The engineering manager prioritizes the full scope of work for the team. That's not a simple change to pull off, however.&lt;/p&gt;
&lt;p&gt;Another solution might be to change the way we use our backlogs. If a product manager gets to prioritize all the work, and the tool they use is a backlog, then we should make sure that all the work&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/#fn:2"&gt;3&lt;/a&gt;&lt;/sup&gt; is in the backlog: features, bugs, and technical debt. Let's take a look at each of these three categories of work.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-backlog-item-is-a-backlog-item-is-a-backlog-item/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="bugs" label="bugs"/>
    <category term="tech-debt" label="tech debt"/>
    <category term="work-management" label="work management"/>
  </entry>
  <entry>
    <title>Our work management tools are limiting our imagination</title>
    <id>https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/</id>
    <updated>2023-01-29T22:34:25+01:00</updated>
    <published>2023-01-29T22:34:25+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/"/>
    <summary type="html">&lt;figure&gt;&lt;img src="https://smallsheds.garden/images/2023/work-mgt-tools/fig4-stories-on-a-wall.jpg"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Several weeks ago I had a thought that felt both serious and not serious, so &lt;a href="https://chaos.social/@joeposaurus/109635747014542350"&gt;I asked on Mastodon&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Should I write a blog post about companies leaving money on the table by not leveraging their choice of work management tool (Jira, Shortcut, etc) as a competitive advantage?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;31% said "yes" and 54% said "a post about what now?", which I suppose reflects my own feelings about the topic. And it motivated me to write this post - especially that 54%. So let's talk about work management tools, the original (user) stories, affordances and constraints, and how these tools are limiting our imagination. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/our-work-management-tools-are-limiting-our-imagination/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="agile-manifesto" label="agile manifesto"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="tools" label="tools"/>
    <category term="work-management" label="work management"/>
  </entry>
</feed>
