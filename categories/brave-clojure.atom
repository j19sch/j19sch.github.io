<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes (Posts about brave clojure)</title>
  <id>https://smallsheds.garden/categories/brave-clojure.atom</id>
  <updated>2025-08-10T13:24:27Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/categories/brave-clojure.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/categories/brave-clojure/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>(clj 12) Core concepts of functional programming with Peg Thing</title>
    <id>https://smallsheds.garden/blog/clojure/2023/clj-12-core-concepts-of-functional-programming-with-peg-thing/</id>
    <updated>2023-08-06T15:13:36+02:00</updated>
    <published>2023-08-06T15:13:36+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2023/clj-12-core-concepts-of-functional-programming-with-peg-thing/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Chapter 5 of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;" explores two core concepts of functional programming: pure functions and immutable data structures. It wraps up with walking you through the &lt;a href="https://github.com/flyingmachine/pegthing"&gt;code&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/clojure/2023/clj-12-core-concepts-of-functional-programming-with-peg-thing/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; of a game called &lt;a href="https://www.braveclojure.com/functional-programming/#Peg_Thing"&gt;"Peg Thing"&lt;/a&gt;&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/clojure/2023/clj-12-core-concepts-of-functional-programming-with-peg-thing/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, which uses &lt;em&gt;"everything you've learned so far: immutable data structures, lazy sequences, pure functions, recursion - everything!"&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;So what is this Peg Thing?&lt;/h2&gt;
&lt;p&gt;For a full description and the code of Peg Thing, you can follow the links in the paragraph above. In this post I'll only share what's relevant to describe what I learned about functional programming through Peg Thing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2023/clj-12-core-concepts-of-functional-programming-with-peg-thing/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>(clj 11) Moving on from some unsolved exercises</title>
    <id>https://smallsheds.garden/blog/clojure/2022/clj-11-moving-on-from-some-unsolved-exercises/</id>
    <updated>2022-12-29T16:08:36+01:00</updated>
    <published>2022-12-29T16:08:36+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2022/clj-11-moving-on-from-some-unsolved-exercises/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;At the end of chapter 4 of &lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;"Clojure for the Brave and True"&lt;/a&gt; there are &lt;a href="https://www.braveclojure.com/core-functions-in-depth/#Exercises"&gt;four exercises&lt;/a&gt;. This post is about me deciding to move on to chapter 5 after solving 1.5 of these exercises.&lt;/p&gt;
&lt;h2&gt;The challenge with these exercises&lt;/h2&gt;
&lt;p&gt;A good example to talk about the challenge with these exercises is the second one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function, append, which will append a new suspect to your list of suspects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-11-moving-on-from-some-unsolved-exercises/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>(clj 10) The mapify function of (clj 9) revisited</title>
    <id>https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/</id>
    <updated>2022-07-13T21:02:36+02:00</updated>
    <published>2022-07-13T21:02:36+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;In my &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/"&gt;previous Clojure post&lt;/a&gt; I covered the code example at the end of Chapter 4 of &lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;"Clojure for the Brave and True"&lt;/a&gt;. Or rather, I focused on a single function in the example, called &lt;code&gt;mapify&lt;/code&gt;, and described how I figured out what it does. At the &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/#the-mapify-function"&gt;end of that post&lt;/a&gt; I shared my disappointment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Having done all this work (and writing) I can't help but feel a bit disappointed. In the end, the function does not seem to do a lot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I shared a Python version of that same function, claiming that it basically does the same thing&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;However, less than a week after publishing the post, I got a very kind email by someone named Martin. And &lt;em&gt;"in defence of clojure and to maybe reduce your disappointment"&lt;/em&gt; Martin pointed out the two versions are not as equivalent as I claimed, because the Clojure version is more general than the Python version. So I looked at the two version again and the way they are different turned out to be quite interesting - interesting enough to write a follow-up post.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-10-the-mapify-function-of-clj-9-revisited/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>(clj 9) How to figure out what a function does</title>
    <id>https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/</id>
    <updated>2022-06-12T15:01:36+02:00</updated>
    <published>2022-06-12T15:01:36+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Chapter 4 of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;" concludes with a &lt;em&gt;Vampire Data Analysis Program&lt;/em&gt;, serving as a summary of the chapter. The book shows some code, explains it, moves on to the next bit of code, etc. I'm not sure why, but I decided I wanted to figure out the code on my own and then read the explanation to see if I got it right. Afterwards I realized it might make a good blog post: both explaining what the program does and what techniques (for lack of a better word) I used to figure it out.&lt;/p&gt;
&lt;p&gt;With most of the work in the program being done by a function called &lt;code&gt;mapify&lt;/code&gt;, this blog post will focus on that single function. As it turns out, it took me more than 2000 words (footnotes not included) to describe what this function consisting of only 9 lines does. So feel free to read all of it, skim through it, or skip straight ahead to the &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/#techniques"&gt;techniques&lt;/a&gt; and some &lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/#reflections"&gt;reflections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-9-how-to-figure-out-what-a-function-does/"&gt;Read more…&lt;/a&gt; (16 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>(clj 8) Some notes on lazy sequences and function parameters</title>
    <id>https://smallsheds.garden/blog/clojure/2022/clj-8-some-notes-on-lazy-sequences-and-function-parameters/</id>
    <updated>2022-04-18T14:16:36+02:00</updated>
    <published>2022-04-18T14:16:36+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2022/clj-8-some-notes-on-lazy-sequences-and-function-parameters/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Almost done with the chapter 4 &lt;em&gt;"Core Functions in Depth"&lt;/em&gt; of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;"! Before wrapping up the chapter with a longer example, a summary, and some exercises, the book goes into lazy sequences, the collection abstraction, and function functions. In this post I will share some notes on infinite lazy sequences and function parameters, making comparisons between Clojure and Python.&lt;/p&gt;
&lt;h2&gt;Infinite lazy sequences&lt;/h2&gt;
&lt;p&gt;A lazy sequence is a sequence whose members aren't computed until you try to access them. One advantage is that it's more efficient: the whole sequence doesn't have to be calculated and kept in memory from the start. Another advantage is that it allows you to create infinite sequences. Do that with a normal sequence and your program would never want to stop calculating.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2022/clj-8-some-notes-on-lazy-sequences-and-function-parameters/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>(clj 7) Programming to abstractions with sequence functions</title>
    <id>https://smallsheds.garden/blog/clojure/2021/clj7-programming-to-abstractions-with-sequence-functions/</id>
    <updated>2021-12-05T13:40:36+01:00</updated>
    <published>2021-12-05T13:40:36+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2021/clj7-programming-to-abstractions-with-sequence-functions/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Looking at my progress so far, I realized it's time re-evaluate this whole learning Clojure-thing. After looking through the table of contents of "&lt;a href="https://www.braveclojure.com/"&gt;Clojure for the Brave and True&lt;/a&gt;" and giving it some thought, I decided to make two changes to how I'll proceed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I will start writing shorter posts and write them more often.&lt;/li&gt;
&lt;li&gt;My goal is to finish &lt;em&gt;"Part II: Language Fundamentals"&lt;/em&gt;. I don't have to do &lt;em&gt;"Part III: Advanced Topics"&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Completing Part II will still take quite some work. I've worked through the two first sections of chapter 4 (5 sections left in that chapter) and Part II goes up to chapter 8. So no time to waste: let's take a look at sequence functions and programming to abstractions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2021/clj7-programming-to-abstractions-with-sequence-functions/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>(clj 6) Three chapters in one year</title>
    <id>https://smallsheds.garden/blog/clojure/2021/clj6-three-chapters-in-one-year/</id>
    <updated>2021-05-08T10:53:25+02:00</updated>
    <published>2021-05-08T10:53:25+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2021/clj6-three-chapters-in-one-year/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;It's been a bit more than a year since I posted my &lt;a href="https://smallsheds.garden/blog/clojure/2020/clj0-diving-straight-in/"&gt;first blog post&lt;/a&gt; about learning Clojure. And it's been five months since my &lt;a href="https://smallsheds.garden/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/"&gt;last blog post&lt;/a&gt; about it. So far I've made it through the first three chapters&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/clojure/2021/clj6-three-chapters-in-one-year/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; of "&lt;a href="https://www.braveclojure.com/clojure-for-the-brave-and-true/"&gt;Clojure for the Brave and True&lt;/a&gt;". Instead of commenting on my learning pace at the start of every post, I've decided that this pace is the pace that works for me at this time, so there's no need to keep revisiting the topic.&lt;/p&gt;
&lt;p&gt;Something I do want to mention is that one thing that triggered me to do some more Clojure was &lt;a href="https://itrevolution.com/the-idealcast-episode-10/"&gt;this episode&lt;/a&gt; of Gene Kim's excellent &lt;a href="https://itrevolution.com/the-idealcast-podcast/"&gt;Idealcast&lt;/a&gt; podcast with &lt;a href="https://www.michaelnygard.com/"&gt;Michael Nygard&lt;/a&gt;, in which they spend some time talking about Clojure.&lt;/p&gt;
&lt;h3&gt;Vim macros&lt;/h3&gt;
&lt;p&gt;The exercises at the end of chapter 3 got me to try out a lot of things, so I got bored having to type in the commands to copy a line (&lt;code&gt;yy&lt;/code&gt;), paste it (&lt;code&gt;p&lt;/code&gt;), replace it by its evaluation (&lt;code&gt;c!$&lt;/code&gt;), comment it out (&lt;code&gt;gcc&lt;/code&gt;), and add a "&lt;code&gt;=&amp;gt;&lt;/code&gt;" to mark it as output. So I learned about Vim macros and recorded that sequence to run when I hit &lt;code&gt;@c&lt;/code&gt;. At the end of my &lt;a href="https://smallsheds.garden/blog/clojure/2020/clj4-learning-when-maps-closures/"&gt;(clj 4)&lt;/a&gt; post I mentioned I might have to do this. Guess that moment came sooner than I expected.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2021/clj6-three-chapters-in-one-year/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>(clj 5) Loop and recur, into and conj</title>
    <id>https://smallsheds.garden/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/</id>
    <updated>2020-12-26T10:09:08+01:00</updated>
    <published>2020-12-26T10:09:08+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Yet again it's been a while since I did some Clojure or blogged about it. This time I'm writing this blog post
three months after working on the code on September 5, 6 and 12. I'm not going to dwell on that too long, because
other things in my life were more important. I did feel a little sad when this year's &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;
launched and I realized my Clojure is nowhere near a state where I could attempt the puzzles. So I ended up doing
the first 10 days in Python, which is twice as far as I got last year.&lt;/p&gt;
&lt;p&gt;I also feel like my current approach to learning lends itself well enough to going slow. Taking my time to play around
and make notes with while working through a section of &lt;a href="https://www.braveclojure.com/"&gt;Clojure for the Brave and True&lt;/a&gt;
and then revisiting my code and notes later to write a blog post, does seem to result in stuff actually sticking in my memory.
(Disclaimer: am writing this before writing the rest of this blog post.) Slow is smooth and smooth is fast, as they say.&lt;/p&gt;
&lt;p&gt;The section I tackled in September is "Pulling It All Together" from Chapter 3, which describes the construction of a 
piece of code of about 50 lines in which - I'm sorry to say -  a hobbit gets hit in different body parts.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2020/clj5-loop-and-recur-into-and-conj/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>(clj 4) Learning about when, maps and closures</title>
    <id>https://smallsheds.garden/blog/clojure/2020/clj4-learning-when-maps-closures/</id>
    <updated>2020-07-31T22:25:15+02:00</updated>
    <published>2020-07-31T22:25:15+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2020/clj4-learning-when-maps-closures/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;It's been more than two months since I did any Clojure - for the obvious reasons. Luckily I did take notes as I proceeded with chapter 3 of "&lt;a href="https://www.braveclojure.com/"&gt;Clojure for the Brave and True&lt;/a&gt;". So the plan is to process these notes into a blog post, which means this post will cover the sections "Data Structures" and "Functions" of that third chapter. Leaving me ready to proceed with the rest of the chapter, i.e. "Pulling It All Together" and the summary and exercises.&lt;/p&gt;
&lt;h3&gt;Why is there a &lt;code&gt;when&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;The part about control flow is actually before the part about &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; which I talked about in my &lt;a href="https://smallsheds.garden/blog/clojure/2020/clj3-and-or-being-weird/"&gt;previous post&lt;/a&gt;, but according to my notes I returned to it. I don't remember why to be honest.&lt;/p&gt;
&lt;p&gt;The book provides the following example of &lt;code&gt;when&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when &lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println &lt;/span&gt;&lt;span class="s"&gt;"Success!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"abra cadabra"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; Success!&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; "abra cadabra"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2020/clj4-learning-when-maps-closures/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>(clj 3) Clojure's 'and' and 'or' are weird (but not really)</title>
    <id>https://smallsheds.garden/blog/clojure/2020/clj3-and-or-being-weird/</id>
    <updated>2020-05-16T21:25:15+02:00</updated>
    <published>2020-05-16T21:25:15+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/clojure/2020/clj3-and-or-being-weird/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Early in &lt;a href="https://www.braveclojure.com/do-things/#Control_Flow"&gt;chapter 3&lt;/a&gt; of the &lt;a href="https://www.braveclojure.com/"&gt;Brave and True&lt;/a&gt;-book the Boolean operators &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; are introduced:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clojure uses the Boolean operators &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt;. &lt;code&gt;or&lt;/code&gt; returns either the first truthy value or the last value. &lt;code&gt;and&lt;/code&gt; returns the first falsey value or, if no values are falsey, the last truthy value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This explanation is followed by some examples:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;:large_I_mean_venti&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;:why_cant_I_just_say_large&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; :large_I_mean_venti&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"no"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; false&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;:free_wifi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;:hot_coffee&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; :hot_coffee&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;:feelin_super_cool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;; =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What I found remarkable about this is that &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; do not return a boolean in all cases. Before I go into that, let's back up a second and cover their basics in a little more depth first.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/clojure/2020/clj3-and-or-being-weird/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="brave-clojure" label="brave clojure"/>
    <category term="clojure" label="clojure"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
  </entry>
</feed>
