<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes (Posts about semantics)</title><link>https://j19sch.github.io/</link><description></description><atom:link href="https://j19sch.github.io/categories/semantics.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:j19sch@hey.com"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sun, 25 Apr 2021 10:42:48 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Getting [name] from "Name: [name]" in Python - an engineering problem</title><link>https://j19sch.github.io/blog/2019/getting-name-from-name-name-in-python-an-engineering-problem/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Today I was presented with an interesting engineering problem. (Important later: context was the code of an auto-test.) Given a string of the format "Name: [name]", what's the best way to get the [name] in Python?&lt;/p&gt;
&lt;p&gt;There are several options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lstrip()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;string slicing&lt;/li&gt;
&lt;li&gt;regex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let's look at each of them and then I'll explain which one I prefer and why. All examples are in Python 3.6, using the &lt;a href="https://docs.python.org/3.6/tutorial/interpreter.html"&gt;Python Interpreter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2019/getting-name-from-name-name-in-python-an-engineering-problem/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programming</category><category>python</category><category>semantics</category><guid>https://j19sch.github.io/blog/2019/getting-name-from-name-name-in-python-an-engineering-problem/</guid><pubDate>Mon, 26 Aug 2019 19:27:38 GMT</pubDate></item><item><title>Your CI/CD pipeline does not run regression tests</title><link>https://j19sch.github.io/blog/2019/your-ci-cd-pipeline-does-not-run-regression-tests/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;h3&gt;CI/CD pipelines&lt;/h3&gt;
&lt;p&gt;The purpose of a CI/CD pipeline is to allow you to deliver small changes in a fast and controlled way. Without any tests in your pipeline you would gain a lot of speed. You'd also lose a lot control, which is why people in general do run tests in their pipeline. The purpose of these tests is to check if that stage of the pipeline meets the minimum level of acceptable quality for that stage.&lt;/p&gt;
&lt;p&gt;For example, commit stage tests will consist of mostly unit tests, a few integration tests, and even fewer end-to-end tests, because early in the pipeline speed is more important than comprehensiveness. When I commit my changes, I want the results fast enough so that I will wait for them - ready to fix any issue that might occur.&lt;/p&gt;
&lt;h3&gt;Regression testing&lt;/h3&gt;
&lt;p&gt;There are many definitions of regression testing, as you can read in &lt;a href="https://arborosa.org/2015/07/31/regression-testing/"&gt;Arborosa's blog post on the topic&lt;/a&gt;. I have always defined regression testing along the lines of "testing the parts that weren't impacted by a change to see if they really weren't impacted." (Which is really weird if you start thinking about it: something is regression testing depending on your knowledge of the system and the change.)&lt;/p&gt;
&lt;h3&gt;The tests in your pipeline are regression tests, …&lt;/h3&gt;
&lt;p&gt;Most of the tests that run in your pipeline are regression tests. Your commits are small and you have a lot of tests, so most of those will cover parts of the system that shouldn't have been impacted by your changes. So yes, regression tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2019/your-ci-cd-pipeline-does-not-run-regression-tests/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ci/cd</category><category>devops</category><category>regression testing</category><category>semantics</category><category>test automation</category><guid>https://j19sch.github.io/blog/2019/your-ci-cd-pipeline-does-not-run-regression-tests/</guid><pubDate>Mon, 05 Aug 2019 21:47:51 GMT</pubDate></item><item><title>Regression testing, it means less than you think</title><link>https://j19sch.github.io/blog/2016/regression-testing-it-means-less-than-you-think/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;The past weeks I have made several attempts at a blog post about regression testing. About how we use it to refer to different things: tests running on a CI server, people executing test scripts, etc. And about how often the term really doesn't mean much at all, yet nobody questions you when you use it: "What are you doing?" "Regression testing." "Oh good, carry on." The point of the post would be to argue we should use the term 'regression testing' a lot less, because most of the time we can be more specific without having to be more verbose.&lt;/p&gt;
&lt;p&gt;However, the more I thought about (what I would qualify as) proper regression testing, the more I felt that regression versus progression (or progressive) testing is a distinction without difference. One interesting observation in this regard is that "regression testing" returns 30 times more results on Google than "progression testing" and "progressive testing" combined. So what's going on here if we have a dichotomy with one member producing so much more discussion than the other? And there's more: regression testing is commonly contrasted with test types like functional testing and usability testing. But how then should I categorize a regression test focusing on functionality&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2016/regression-testing-it-means-less-than-you-think/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2016/regression-testing-it-means-less-than-you-think/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>regression testing</category><category>semantics</category><category>test management</category><category>test strategy</category><guid>https://j19sch.github.io/blog/2016/regression-testing-it-means-less-than-you-think/</guid><pubDate>Sun, 03 Jan 2016 18:42:26 GMT</pubDate></item><item><title>Why the testing/checking debate is so messy - a fruit salad analogy</title><link>https://j19sch.github.io/blog/2015/why-the-testingchecking-debate-is-so-messy-a-fruit-salad-analogy/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Five days ago James Thomas posted &lt;a href="https://www.linkedin.com/grp/post/55636-6069749695687770112?trk=groups-post-b-title"&gt;the following&lt;/a&gt; in the Software Testing &amp;amp; Quality Assurance group on LinkedIn:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Are Testing and Checking different or not?&lt;/strong&gt;&lt;br&gt;
This &lt;a href="http://gerrardconsulting.com/?q=node/659"&gt;article by Paul Gerrard&lt;/a&gt; explains why we shouldn't be trying to draw a distinction between checking and testing, but should be paying more attention to the skills of the testers we employ to do the job.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I posted a reply there, but I think I can do better than those initial thoughts, so here we go.&lt;/p&gt;
&lt;p&gt;Let's imagine the following scene: Alice and Bob are preparing a fruit salad together.&lt;br&gt;
&lt;em&gt;Alice&lt;/em&gt;: "Ok, let's make a nice fruit salad. We need some apples and some fruit."&lt;br&gt;
&lt;em&gt;Bob&lt;/em&gt;: "Euh, aren't apples fruit?"&lt;br&gt;
&lt;em&gt;Alice&lt;/em&gt;: "Yes. Of course. But when I say 'fruit', I mean 'non-apple fruit'."&lt;/p&gt;&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2015/why-the-testingchecking-debate-is-so-messy-a-fruit-salad-analogy/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>context-driven testing</category><category>semantics</category><category>testing and checking</category><guid>https://j19sch.github.io/blog/2015/why-the-testingchecking-debate-is-so-messy-a-fruit-salad-analogy/</guid><pubDate>Sun, 15 Nov 2015 11:17:12 GMT</pubDate></item><item><title>What's the word for the part of testing that's not checking?</title><link>https://j19sch.github.io/blog/2015/whats-the-word-for-the-part-of-testing-thats-not-checking/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;h3&gt;The question I asked&lt;/h3&gt;
&lt;p&gt;Yesterday &lt;a href="https://twitter.com/j19sch/status/632910141751447552"&gt;I asked on twitter&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Question: what's the proper word for the part of testing that's not checking? #cdt #testing #semantics&lt;br&gt;
- Joep Schuurkes (@j19sch) August 16, 2015&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reason I asked, is that I noticed I needed that word in discussions about testing and checking. If checking is part of testing - and in the RST namespace it most definitely is, see '&lt;a href="http://www.satisfice.com/blog/archives/856"&gt;Testing and checking refined&lt;/a&gt;' -, then what can I contrast checking with? Contrasting checking with testing (as in 'checking versus testing') isn't going to work: there's one thing that's checking and then there's this other thing, testing, that contains that one thing and some other stuff&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2015/whats-the-word-for-the-part-of-testing-thats-not-checking/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;, but it's like a completely different thing. See the difference? Conceptually that just doesn't work - at least not in my mind.&lt;/p&gt;
&lt;h3&gt;The answers I got&lt;/h3&gt;
&lt;p&gt;So I figured I'd ask twitter in all its infinite testing wisdom and lo and behold, not only did people reply, a discussion ensued with the following people (listed in no particular order) participating in different configurations: &lt;a href="https://twitter.com/eddybruin"&gt;@eddybruin&lt;/a&gt;, &lt;a href="https://twitter.com/mariakedemo"&gt;@mariakedemo&lt;/a&gt;, &lt;a href="https://twitter.com/SandroIbig"&gt;@SandroIbig&lt;/a&gt;, &lt;a href="https://twitter.com/TestPappy"&gt;@TestPappy&lt;/a&gt;, &lt;a href="https://twitter.com/dwiersma"&gt;@dwiersma&lt;/a&gt;, &lt;a href="https://twitter.com/ilarihenrik"&gt;@ilarihenrik&lt;/a&gt;, &lt;a href="https://twitter.com/PhilipHoeben"&gt;@PhilipHoeben&lt;/a&gt;, &lt;a href="https://twitter.com/huibschoots"&gt;@huibschoots&lt;/a&gt; and &lt;a href="https://twitter.com/deefex"&gt;@deefex&lt;/a&gt;. Thank you all!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2015/whats-the-word-for-the-part-of-testing-thats-not-checking/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>context-driven testing</category><category>semantics</category><category>testing and checking</category><guid>https://j19sch.github.io/blog/2015/whats-the-word-for-the-part-of-testing-thats-not-checking/</guid><pubDate>Mon, 17 Aug 2015 18:19:25 GMT</pubDate></item><item><title>Three arguments against the verification-validation dichotomy</title><link>https://j19sch.github.io/blog/2015/three-arguments-against-the-verification-validation-dichotomy/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Last week while talking with two colleagues, one of them mentioned the verification/validation thing. And I noticed it made me feel uneasy. Because I know well enough what is meant by the distinction, but on a practical level I simply can't relate to it. When I think about what I do as a software tester and how verification versus validation applies to it, nothing happens. Blank mind. Crickets. Tumbleweed.
So after giving it some thought, I present you with three arguments against the verification-validation dichotomy.&lt;/p&gt;
&lt;p&gt;First of course, we have the obligatory interlude of defining these two terms. A place to start is the Wikipedia page on &lt;a href="http://en.wikipedia.org/wiki/Software_verification_and_validation"&gt;Software verification and validation&lt;/a&gt;. Unfortunately it contains conflicting definitions, so if anyone cares enough, please do fix. Luckily there's also the general &lt;a href="http://en.wikipedia.org/wiki/Verification_and_validation"&gt;Verification and validation&lt;/a&gt; page of Wikipedia, which gives us (among others) the tl;dr version of the distinction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verification: &lt;em&gt;Are we building the product right?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Validation: &lt;em&gt;Are we building the right product?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally there's the &lt;a href="http://www.istqb.org/downloads/finish/20/145.html"&gt;ISTQB glossary v2.4&lt;/a&gt; that borrows from ISO 9000:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verification: &lt;em&gt;Confirmation by examination and through provision of objective evidence that specified requirements have been fulfilled.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Validation: &lt;em&gt;Confirmation by examination and through provision of objective evidence that the requirements for a specific intended use or application have been fulfilled.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now on to the three arguments.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2015/three-arguments-against-the-verification-validation-dichotomy/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>exploration</category><category>semantics</category><category>verification and validation</category><guid>https://j19sch.github.io/blog/2015/three-arguments-against-the-verification-validation-dichotomy/</guid><pubDate>Tue, 24 Mar 2015 19:53:24 GMT</pubDate></item><item><title>Five leftover thoughts on software testing</title><link>https://j19sch.github.io/blog/2013/five-leftover-thoughts-on-software-testing/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Defect severity 'Skynet': If this gets to production, we're screwed. Really screwed.&lt;/p&gt;
&lt;p&gt;The problem with templates is that the people who need them shouldn't be writing the document in the first place and that the people who don't need them, have trouble shaking off the vague sense of obligation to adhere to them.&lt;/p&gt;
&lt;p&gt;Happy path application: application that works perfectly fine as long as you stick to the beaten path with your eyes half-closed.&lt;/p&gt;
&lt;p&gt;The contents of a test plan can be divided into the following four categories: good stuff, cover your ass, bullshit, trivialities.&lt;/p&gt;
&lt;p&gt;Buddhist software development: there is no progress, only a never-ending cycle of suffering.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2013/five-leftover-thoughts-on-software-testing/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>semantics</category><category>software testing</category><category>test management</category><guid>https://j19sch.github.io/blog/2013/five-leftover-thoughts-on-software-testing/</guid><pubDate>Sat, 03 Aug 2013 10:28:32 GMT</pubDate></item></channel></rss>