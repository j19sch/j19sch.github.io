<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://smallsheds.garden/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Joep Schuurkes (Posts about software testing)</title>
  <id>https://smallsheds.garden/categories/software-testing.atom</id>
  <updated>2023-12-29T09:15:50Z</updated>
  <author>
    <name>Joep Schuurkes</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://smallsheds.garden/categories/software-testing.atom"/>
  <link rel="alternate" type="text/html" href="https://smallsheds.garden/categories/software-testing/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>A good tester is all over the place</title>
    <id>https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/</id>
    <updated>2023-11-26T00:00:00+01:00</updated>
    <published>2023-11-26T00:00:00+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Over the past year, I've been thinking about how testing-related roles are still an unsolved problem in software development. We keep trying different permutations: shifting left and shifting right, being closer to the programmers while not too far from other testers, doing less testing ourselves so we can support others more, etc.&lt;/p&gt;
&lt;p&gt;And still, to be effective in any of these permutations, you can't let yourself be limited by them. You need to work both inside and outside the existing structures. You have to "be all over the place", in a good way.&lt;/p&gt;
&lt;h2&gt;Testers do testing&lt;/h2&gt;
&lt;p&gt;Let's start with a straightforward statement: a tester tests. Then what is testing? I &lt;a href="https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/"&gt;still like&lt;/a&gt; the definition &lt;em&gt;"Testing is investigating in order to evaluate a product."&lt;/em&gt; The most obvious thing to investigate, to test, is the code that is being written. The best way to do this, in my opinion, is through the combination of exploratory testing and test automation, i.e. what &lt;a href="https://maaretp.com/"&gt;Maaret Pyhäjärvi&lt;/a&gt; has named "&lt;a href="https://www.youtube.com/watch?v=T_67oQrPZhQ"&gt;contemporary exploratory testing&lt;/a&gt;". And to be clear, while the execution part tends to be the most visible, effective testing also needs good test strategy, design, and reporting.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/a-good-tester-is-all-over-the-place/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="management" label="management"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-management" label="test management"/>
  </entry>
  <entry>
    <title>I'm a quality engineer and I'm not sure how I feel about that</title>
    <id>https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/</id>
    <updated>2023-07-05T11:42:34+02:00</updated>
    <published>2023-07-05T11:42:34+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;This post is a slightly edited version of the experience report I &lt;a class="reference external" href="https://smallsheds.garden/slides/xp2023-quality-engineer.html"&gt;presented&lt;/a&gt; at the &lt;a class="reference external" href="https://www.agilealliance.org/xp2023/"&gt;xp2023&lt;/a&gt; conference. It covers my first six months at a scale-up, working as a quality engineer for the first time - after having worked in other testing-related roles for 15+ years.&lt;/p&gt;
&lt;p&gt;My main finding is that for a quality engineering role to work well, certain structures need to be in place. The most important one is that the impact the quality engineer is expected to have, is clear to both the quality engineer and the team(s) they are supporting. However, regardless of which structures you put in place, a quality engineer will also need to work around those structures to be fully effective.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/im-a-quality-engineer-and-im-not-sure-how-i-feel-about-that/"&gt;Read more…&lt;/a&gt; (22 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="conferences" label="conferences"/>
    <category term="leadership" label="leadership"/>
    <category term="management" label="management"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>My five favorite testing questions</title>
    <id>https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/</id>
    <updated>2023-05-03T08:57:25+02:00</updated>
    <published>2023-05-03T08:57:25+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Recently I realized there are a few testing questions I use a lot. They lie at the top of my testing toolbox, so to speak. Together they shape my testing style, making it easier for me to discover certain things, but probably also harder to find other kinds of things. So here are my five favorite testing questions, in no particular order.&lt;/p&gt;
&lt;h2&gt;What if there are zero, one, many, lots of this thing?&lt;/h2&gt;
&lt;p&gt;Last year I expressed my surprise &lt;a href="https://chaos.social/@joeposaurus/109427704814392787"&gt;on Mastodon&lt;/a&gt; how many times I've found bugs by asking the question: &lt;em&gt;"What if there are 0 / 1 / several / lots of this thing?"&lt;/em&gt; And if you're working closely enough to the code, you should also ask about "null".&lt;/p&gt;
&lt;p&gt;Quite a few people responded to my message. Turns out it's a &lt;a href="https://www.qwan.eu/2021/07/09/tdd-0-1-n.html"&gt;very&lt;/a&gt; &lt;a href="http://blog.wingman-sw.com/tdd-guided-by-zombies"&gt;common&lt;/a&gt; &lt;a href="https://mas.to/@zebulon/109428667658139893"&gt;pattern&lt;/a&gt; in TDD. And Brian Marick&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; remembered it &lt;a href="https://mstdn.social/@marick/109428042023981110"&gt;standing out&lt;/a&gt; when he was looking into fixed bugs in the Linux kernel they used in the '80s. Personally I learned it from Elisabeth Hendrickson's &lt;a href="https://web.archive.org/web/20150217124452/http://testobsessed.com/wp-content/uploads/2011/04/testheuristicscheatsheetv1.pdf"&gt;"Test Heuristics Cheat Sheet"&lt;/a&gt;, which found a &lt;a href="https://www.ministryoftesting.com/articles/ab1cd85c?s_id=14715206"&gt;new home&lt;/a&gt; last year at the Ministry of Testing.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2023/my-five-favorite-testing-questions/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="exploratory-testing" label="exploratory testing"/>
    <category term="heuristics" label="heuristics"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>Agile tester or quality engineer, who's to say?</title>
    <id>https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/</id>
    <updated>2022-11-06T16:29:25+01:00</updated>
    <published>2022-11-06T16:29:25+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;In her article &lt;a href="https://web.archive.org/web/20041001003124/http://www.qualitytree.com/feature/btwq.pdf"&gt;"Better Testing, Worse Quality?"&lt;/a&gt; &lt;a href="https://ruby.social/@testobsessed"&gt;Elisabeth Hendrickson&lt;/a&gt; makes an interesting case about independent testing, i.e. testing done by an independent test team. She discovered that beyond a certain point, investigating more in independent testing will make both quality and speed go down, not up. In &lt;a href="https://itrevolution.com/podcast/the-idealcast-episode-3/"&gt;episode 3&lt;/a&gt; of the &lt;a href="https://itrevolution.com/podcast/"&gt;Idealcast&lt;/a&gt;, she summarizes her article as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"[...] when you ramp up the amount of investment in an independent test group, then given the amount of pressure that's already on the developers to deliver, it is so easy&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; for the developers to say, this isn't my problem anymore. Thank goodness we've got the professionals over here. It's their job to test." &lt;em&gt;(00:11:21)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later in the article, Elisabeth Hendrickson gives advice on how to avoid or escape this spiral of decreasing quality and speed. There are four dials you can turn either up or down:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/agile-tester-or-quality-engineer-whos-to-say/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>Quality: different purposes, different definitions</title>
    <id>https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/</id>
    <updated>2022-08-24T19:41:25+02:00</updated>
    <published>2022-08-24T19:41:25+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;For years when asked to define quality, I've said "value to a person who matters"&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Not too long ago I used that definition in the &lt;a href="https://smallsheds.garden/blog/2021/choosing-your-value-system/"&gt;first post&lt;/a&gt; of my four-part series "Thinking about quality". However, in the &lt;a href="https://smallsheds.garden/blog/2021/thinking-about-quality-so-what-to-do/"&gt;fourth post&lt;/a&gt; of that series I also said that quality is something emergent. And I continued with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can have long discussions about what quality is, but that's a different question from how do you get quality?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Today I took this one step further, when I realized that depending on the context, I talk very differently about quality. And while I may not define 'quality' explicitly in every conversation, implicitly I'm still using different definitions. That alone, I think is interesting: instead of a single, general definition of quality that always applies, I have different definitions depending on their purpose&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/quality-different-purposes-different-definitions/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="quality" label="quality"/>
    <category term="quality-engineering" label="quality engineering"/>
    <category term="semantics" label="semantics"/>
    <category term="software-development" label="software development"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>"Tester" is an overloaded variable</title>
    <id>https://smallsheds.garden/blog/2022/tester-is-an-overloaded-variable/</id>
    <updated>2022-08-04T11:39:25+02:00</updated>
    <published>2022-08-04T11:39:25+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2022/tester-is-an-overloaded-variable/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Yesterday I came across a post on LinkedIn explaining why there are no testers in Scrum&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/tester-is-an-overloaded-variable/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. What struck me most about the post was the amount of work the word "tester" was doing. In one sentence it meant one thing (a role in a team), in the next sentence something else (a step in the process), and so on. Hence the title of this post: the word "tester" was being used as an overloaded variable. So let's do some unpacking.&lt;/p&gt;
&lt;h2&gt;Testers to people management&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;"Having a tester"&lt;/em&gt; means that there are people with the official title of "tester" or "QA engineer" or whatever within the company. For the purposes of people management&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="https://smallsheds.garden/blog/2022/tester-is-an-overloaded-variable/#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;, there's a distinction between this role and the other roles in the company. This allows for more specific expectations about the role, for different career paths and salary scales, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/tester-is-an-overloaded-variable/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="management" label="management"/>
    <category term="scrum" label="scrum"/>
    <category term="semantics" label="semantics"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-management" label="test management"/>
  </entry>
  <entry>
    <title>Three thoughts on risk-based testing</title>
    <id>https://smallsheds.garden/blog/2022/three-thoughts-on-risk-based-testing/</id>
    <updated>2022-07-17T11:56:30+02:00</updated>
    <published>2022-07-17T11:56:30+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2022/three-thoughts-on-risk-based-testing/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;The past month I've been thinking about risk-based testing. This post collects three thoughts on risk-based testing I kept returning to.&lt;/p&gt;
&lt;h2&gt;If not based on risks, then based on what?&lt;/h2&gt;
&lt;p&gt;About a month ago I &lt;a href="https://twitter.com/j19sch/status/1533760354647523330"&gt;tweeted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What are the alternatives to risk-based testing?&lt;br&gt;
Requirements-based? I'd argue that's a subset of risk-based.&lt;br&gt;
Unguided? That's either a bad idea ("we hope to get lucky") or aimed at the risk of unknown unknowns.&lt;br&gt;
Any other options? Because something about the term is bothering me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My question was inspired by the &lt;a href="https://smallsheds.garden/slides/rtc2019-testing-types.html#/15/0/1"&gt;"opposite" heuristic&lt;/a&gt; from my talk about &lt;a href="https://smallsheds.garden/slides/rtc2019-testing-types.html#/"&gt;testing types&lt;/a&gt;: if we have some kind of category, what's the name for the things not in that category? Applied to risk-based testing: what's the name for testing that's not risk-based?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2022/three-thoughts-on-risk-based-testing/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="coverage" label="coverage"/>
    <category term="software-testing" label="software testing"/>
    <category term="test-management" label="test management"/>
    <category term="test-strategy" label="test strategy"/>
  </entry>
  <entry>
    <title>Reflections on my testing manifesto</title>
    <id>https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/</id>
    <updated>2018-12-22T17:43:10+01:00</updated>
    <published>2018-12-22T17:43:10+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Earlier this month I published my &lt;a href="https://smallsheds.garden/blog/2018/manifesto-for-software-testing/"&gt;Manifesto for software testing&lt;/a&gt;. This manifesto is my attempt to bring together what I have learned about testing from the context-driven, agile and DevOps communities. Below you can find the manifesto with my reflections on it.&lt;/p&gt;
&lt;h5&gt;1. Testing is investigating in order to evaluate a product.&lt;/h5&gt;
&lt;p&gt;This definition is clearly influenced by James Bach's "questioning a product in order to evaluate it". I'm not sure at which point I started misremembering his definition as "investigating a product...", but it works well with a change I did make intentionally: moving "a product" to the second part of the definition. As explained in 6. I believe that in order to evaluate the product, we need to investigate a number of different things, not only the product.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2018/reflections-on-my-testing-manifesto/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="context-driven-testing" label="context-driven testing"/>
    <category term="devops" label="devops"/>
    <category term="manifesto" label="manifesto"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>Manifesto for software testing</title>
    <id>https://smallsheds.garden/blog/2018/manifesto-for-software-testing/</id>
    <updated>2018-12-04T20:44:51+01:00</updated>
    <published>2018-12-04T20:44:51+01:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2018/manifesto-for-software-testing/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;1. Testing is investigating in order to evaluate a product.&lt;/p&gt;
&lt;p&gt;2. An evaluation is a judgement about quality – quality being value to persons who matter.&lt;/p&gt;
&lt;p&gt;3. This makes testing a fundamentally human and contextual activity.&lt;/p&gt;
&lt;p&gt;4. As such, testing is an exploratory and open-ended activity, requiring continuous evaluation of and experimentation with our practices.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2018/manifesto-for-software-testing/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="agile" label="agile"/>
    <category term="context-driven-testing" label="context-driven testing"/>
    <category term="devops" label="devops"/>
    <category term="manifesto" label="manifesto"/>
    <category term="software-testing" label="software testing"/>
  </entry>
  <entry>
    <title>Information debt</title>
    <id>https://smallsheds.garden/blog/2014/information-debt/</id>
    <updated>2014-07-13T16:50:21+02:00</updated>
    <published>2014-07-13T16:50:21+02:00</published>
    <author>
      <name>Joep Schuurkes</name>
    </author>
    <link rel="alternate" type="text/html" href="https://smallsheds.garden/blog/2014/information-debt/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Last week ago the following happened on twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New word of the day: "information debt". It's like technical debt, but related to information, communication, models, docs, visualisations.&lt;br&gt;
&lt;em&gt;- Joep Schuurkes (@j19sch) &lt;a href="https://twitter.com/j19sch/statuses/486534198803841024"&gt;July 8, 2014&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;@j19sch: New word of the day: "information debt" =&amp;gt; blogpost coming up ?!?!?&lt;br&gt;
&lt;em&gt;- Simon P. Schrijver (@SimonSaysNoMore) &lt;a href="https://twitter.com/SimonSaysNoMore/statuses/486551279590977536"&gt;July 8, 2014&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;@SimonSaysNoMore Wasn't planning to, but now you made me think about it, so yes. Damn you! :-P&lt;br&gt;
&lt;em&gt;- Joep Schuurkes (@j19sch) &lt;a href="https://twitter.com/j19sch/statuses/486555404089188352"&gt;July 8, 2014&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In case you don't know what technical debt is, you might want to read &lt;a href="http://techblog.net-a-porter.com/2011/10/agile-tetris/"&gt;this&lt;/a&gt; first. (It's the oldest source I could find of the technical debt-tetris analogy, by the way. If you know of an older one, please leave a comment.)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://smallsheds.garden/blog/2014/information-debt/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="information-debt" label="information debt"/>
    <category term="software-testing" label="software testing"/>
    <category term="vipt" label="VIPT"/>
  </entry>
</feed>
