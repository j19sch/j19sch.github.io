<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes (Posts about software testing)</title><link>https://j19sch.github.io/</link><description></description><atom:link href="https://j19sch.github.io/categories/software-testing.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:j19sch@hey.com"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sun, 18 Apr 2021 16:11:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Reflections on my testing manifesto</title><link>https://j19sch.github.io/blog/2018/reflections-on-my-testing-manifesto/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Earlier this month I published my &lt;a href="https://j19sch.github.io/blog/2018/manifesto-for-software-testing/"&gt;Manifesto for software testing&lt;/a&gt;. This manifesto is my attempt to bring together what I have learned about testing from the context-driven, agile and DevOps communities. Below you can find the manifesto with my reflections on it.&lt;/p&gt;
&lt;h5&gt;1. Testing is investigating in order to evaluate a product.&lt;/h5&gt;
&lt;p&gt;This definition is clearly influenced by James Bach's "questioning a product in order to evaluate it". I'm not sure at which point I started misremembering his definition as "investigating a product...", but it works well with a change I did make intentionally: moving "a product" to the second part of the definition. As explained in 6. I believe that in order to evaluate the product, we need to investigate a number of different things, not only the product.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2018/reflections-on-my-testing-manifesto/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>context-driven testing</category><category>devops</category><category>manifesto</category><category>software testing</category><guid>https://j19sch.github.io/blog/2018/reflections-on-my-testing-manifesto/</guid><pubDate>Sat, 22 Dec 2018 16:43:10 GMT</pubDate></item><item><title>Manifesto for software testing</title><link>https://j19sch.github.io/blog/2018/manifesto-for-software-testing/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;1. Testing is investigating in order to evaluate a product.&lt;/p&gt;
&lt;p&gt;2. An evaluation is a judgement about quality – quality being value to persons who matter.&lt;/p&gt;
&lt;p&gt;3. This makes testing a fundamentally human and contextual activity.&lt;/p&gt;
&lt;p&gt;4. As such, testing is an exploratory and open-ended activity, requiring continuous evaluation of and experimentation with our practices.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2018/manifesto-for-software-testing/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>agile</category><category>context-driven testing</category><category>devops</category><category>manifesto</category><category>software testing</category><guid>https://j19sch.github.io/blog/2018/manifesto-for-software-testing/</guid><pubDate>Tue, 04 Dec 2018 19:44:51 GMT</pubDate></item><item><title>Information debt</title><link>https://j19sch.github.io/blog/2014/information-debt/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Last week ago the following happened on twitter:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New word of the day: "information debt". It's like technical debt, but related to information, communication, models, docs, visualisations.&lt;br&gt;
&lt;em&gt;- Joep Schuurkes (@j19sch) &lt;a href="https://twitter.com/j19sch/statuses/486534198803841024"&gt;July 8, 2014&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;@j19sch: New word of the day: "information debt" =&amp;gt; blogpost coming up ?!?!?&lt;br&gt;
&lt;em&gt;- Simon P. Schrijver (@SimonSaysNoMore) &lt;a href="https://twitter.com/SimonSaysNoMore/statuses/486551279590977536"&gt;July 8, 2014&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;@SimonSaysNoMore Wasn't planning to, but now you made me think about it, so yes. Damn you! :-P&lt;br&gt;
&lt;em&gt;- Joep Schuurkes (@j19sch) &lt;a href="https://twitter.com/j19sch/statuses/486555404089188352"&gt;July 8, 2014&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In case you don't know what technical debt is, you might want to read &lt;a href="http://techblog.net-a-porter.com/2011/10/agile-tetris/"&gt;this&lt;/a&gt; first. (It's the oldest source I could find of the technical debt-tetris analogy, by the way. If you know of an older one, please leave a comment.)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2014/information-debt/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>information debt</category><category>software testing</category><category>VIPT</category><guid>https://j19sch.github.io/blog/2014/information-debt/</guid><pubDate>Sun, 13 Jul 2014 14:50:21 GMT</pubDate></item><item><title>Five leftover thoughts on software testing</title><link>https://j19sch.github.io/blog/2013/five-leftover-thoughts-on-software-testing/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;Defect severity 'Skynet': If this gets to production, we're screwed. Really screwed.&lt;/p&gt;
&lt;p&gt;The problem with templates is that the people who need them shouldn't be writing the document in the first place and that the people who don't need them, have trouble shaking off the vague sense of obligation to adhere to them.&lt;/p&gt;
&lt;p&gt;Happy path application: application that works perfectly fine as long as you stick to the beaten path with your eyes half-closed.&lt;/p&gt;
&lt;p&gt;The contents of a test plan can be divided into the following four categories: good stuff, cover your ass, bullshit, trivialities.&lt;/p&gt;
&lt;p&gt;Buddhist software development: there is no progress, only a never-ending cycle of suffering.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2013/five-leftover-thoughts-on-software-testing/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>semantics</category><category>software testing</category><category>test management</category><guid>https://j19sch.github.io/blog/2013/five-leftover-thoughts-on-software-testing/</guid><pubDate>Sat, 03 Aug 2013 10:28:32 GMT</pubDate></item><item><title>Why I dislike test management</title><link>https://j19sch.github.io/blog/2013/why-i-dislike-test-management/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;As I am enjoying these short, not very nuanced, not extremely well thought out blog posts, here’s another one.&lt;/p&gt;
&lt;p&gt;Some people seem to think that it makes sense to think of testing as a project within a project, so they apply project management tools and techniques to testing. This simply doesn’t work.&lt;/p&gt;
&lt;p&gt;Because what are the tools and techniques do they use? A plan with milestones no one is ever going to make as unexpected stuff tends to happen. A budget that is too tight because it’s based on that same plan. Entry criteria that are not met, but never mind, we’re running out of time so you need to start testing anyhow. And finally exit criteria that we fail to meet as well, but hey we’ll go live anyway, because the software really isn’t that bad (or so we hope).&lt;/p&gt;
&lt;p&gt;So in the end, a lot of time and effort is spent on producing documents that are of little use in guiding the actual testing effort. The only thing they do is give some people a warm and fuzzy illusion of control.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2013/why-i-dislike-test-management/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software testing</category><category>test management</category><category>test strategy</category><guid>https://j19sch.github.io/blog/2013/why-i-dislike-test-management/</guid><pubDate>Mon, 15 Jul 2013 18:10:03 GMT</pubDate></item><item><title>Some thoughts after attending the 'Getting a Grip on Exploratory Testing' workshop</title><link>https://j19sch.github.io/blog/2012/some-thoughts-after-attending-the-getting-a-grip-on-exploratory-testing-workshop/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;About two weeks ago I attended &lt;a href="http://www.workroom-productions.com/"&gt;James Lyndsay&lt;/a&gt;'s 'Getting a Grip on Exploratory Testing' workshop in Amsterdam. So it's about time to write something about it…&lt;/p&gt;
&lt;p&gt;Now one of the things I dislike about workshop blog posts is that people will say "It was great! And person X is such a good trainer!" without saying much about the content of the workshop. However, I find myself now writing this post and thinking: I shouldn't post a full summary of the workshop. Not that it would spoil too much for any future attendee: most of the workshop consists of exercises and discussion. But posting a summary of the workshop that James has put a lot of effort in to create, just doesn't feel right. So let me just say this: the workshop was great and James is such a good trainer! :-D&lt;/p&gt;
&lt;p&gt;Now that's out of the way, there are a few things from the workshop I'd like to share. Of course, the usual disclaimer applies: these are my thoughts on what was presented during the workshop. Any misrepresentations are my responsibility.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2012/some-thoughts-after-attending-the-getting-a-grip-on-exploratory-testing-workshop/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>exploration</category><category>software testing</category><category>workshop</category><guid>https://j19sch.github.io/blog/2012/some-thoughts-after-attending-the-getting-a-grip-on-exploratory-testing-workshop/</guid><pubDate>Sun, 29 Apr 2012 17:55:30 GMT</pubDate></item><item><title>The irony of scripted testing</title><link>https://j19sch.github.io/blog/2012/the-irony-of-scripted-testing/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;A bit over a week ago, &lt;a href="https://twitter.com/jamesmarcusbach/status/185816224075227137"&gt;James Bach posted on twitter&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"This video shows a nice simple contrast between heavy scripted testing and exploratory testing &lt;a href="http://youtu.be/PxTqjAwM2Pw"&gt;http://youtu.be/PxTqjAwM2Pw&lt;/a&gt;"&lt;br&gt;
- James Bach (@jamesmarcusbach) March 30, 2012&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I watched the video, hoping to see something that would make me go 'Cool!', but instead I went 'Hmmm.'&lt;/p&gt;
&lt;p&gt;First let me say that this video does get a few things right:&lt;br&gt;
- Exploratory testing can be structured by using charters.&lt;br&gt;
- Exploratory testing allows you to easily change your test approach based on your test results.&lt;br&gt;
- Exploratory testing is very adaptable when confronted with inaccurate or changing requirements.&lt;br&gt;
Yet notice how the above only talks about exploratory testing, because for every thing the video gets right about exploratory testing, it gets something wrong about scripted testing – or rather about how scripted testing works in practice.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2012/the-irony-of-scripted-testing/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>exploration</category><category>software testing</category><guid>https://j19sch.github.io/blog/2012/the-irony-of-scripted-testing/</guid><pubDate>Mon, 09 Apr 2012 21:16:17 GMT</pubDate></item><item><title>The Seven Basic Principles of the Context-Driven School - part not-three</title><link>https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-not-three/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;This blog post should have been part three on the basic principles of context-driven testing. As you can see from the title, it is not. :-) The plan was to see if and to what degree the other schools of testing could accomodate the principles of the context-driven school - as a way of highlighting what makes the context-driven school different from the other schools. The problem is I'm not that interested in doing that at the moment, so the chance is small an interesting post would result from it. Perhaps another time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-not-three/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>context-driven testing</category><category>software testing</category><guid>https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-not-three/</guid><pubDate>Fri, 30 Mar 2012 14:26:26 GMT</pubDate></item><item><title>The Seven Basic Principles of the Context-Driven School - part two</title><link>https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-two/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;After the introductory post (to be found &lt;a href="https://testingcurve.wordpress.com/2012/01/15/the-seven-basic-principles-of-the-context-driven-school-part-one/"&gt;here&lt;/a&gt;) it's time to take a closer look at each of &lt;a href="http://www.context-driven-testing.com/"&gt;the basic principles&lt;/a&gt;. In the past weeks I found out that it's quite possible to take any one of these principles as a starting point for several different trains of thought. More importantly I discovered a story&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-two/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; to the principles: the first five principles are ways in which software testing is intellectually challenging, as stated by principle six. And principle seven then wraps it all up.
So below you can find some of the thoughts I had on the principles and the story I discovered.&lt;/p&gt;
&lt;h4&gt;1. The value of any practice depends on its context.&lt;/h4&gt;
&lt;p&gt;To get a better understanding of this principle I started thinking: what if the value of a practice did not depend on context? What else coud it depend on?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-two/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>context-driven testing</category><category>software testing</category><guid>https://j19sch.github.io/blog/2012/the-seven-basic-principles-of-the-context-driven-school-part-two/</guid><pubDate>Sun, 05 Feb 2012 20:51:01 GMT</pubDate></item><item><title>The Seven Basic Principles of the Context-Driven School - part one</title><link>https://j19sch.github.io/blog/2012/he-seven-basic-principles-of-the-context-driven-school-part-one/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In the next several posts, I'd like to take a look at the seven basic principles of the Context-Driven School of software testing. The main reason for this is that I like what people belonging to this school say about testing, but I don't 'get' the seven basic principles. I do understand the principles when I read them, but I don't feel like I 'own' them.&lt;/p&gt;
&lt;p&gt;So in the first few posts I will explore the principles as such. After that I will take a look at what other people have said about these principles. So please leave a comment if you know some good secondary sources on these principles!&lt;/p&gt;
&lt;p&gt;The seven basic principles can be found here: &lt;a href="http://www.context-driven-testing.com"&gt;http://www.context-driven-testing.com&lt;/a&gt;. They are also present as an appendix in "Lessons learned in software testing" by Cem Kaner, James Bach, Bret Pettichord, publised in 2002. This means that these principles were written in a context I'm not familiar with. They are at least four years older than my career in software testing, which began in 2006. And they were written by people from the USA, while I live and work in Western Europe.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2012/he-seven-basic-principles-of-the-context-driven-school-part-one/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>context-driven testing</category><category>software testing</category><guid>https://j19sch.github.io/blog/2012/he-seven-basic-principles-of-the-context-driven-school-part-one/</guid><pubDate>Sun, 15 Jan 2012 21:11:43 GMT</pubDate></item></channel></rss>