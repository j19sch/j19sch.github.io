<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Joep Schuurkes (Posts about test automation)</title><link>https://j19sch.github.io/</link><description></description><atom:link href="https://j19sch.github.io/categories/test-automation.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:j19sch@hey.com"&gt;Joep Schuurkes&lt;/a&gt; 
&lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License" style="border-width:0;margin: 0px 0px 0px 0px" src="https://i.creativecommons.org/l/by/4.0/80x15.png" /&gt;
&lt;/a&gt;
</copyright><lastBuildDate>Sat, 15 May 2021 14:42:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Your CI/CD pipeline does not run regression tests</title><link>https://j19sch.github.io/blog/2019/your-ci-cd-pipeline-does-not-run-regression-tests/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;h3&gt;CI/CD pipelines&lt;/h3&gt;
&lt;p&gt;The purpose of a CI/CD pipeline is to allow you to deliver small changes in a fast and controlled way. Without any tests in your pipeline you would gain a lot of speed. You'd also lose a lot control, which is why people in general do run tests in their pipeline. The purpose of these tests is to check if that stage of the pipeline meets the minimum level of acceptable quality for that stage.&lt;/p&gt;
&lt;p&gt;For example, commit stage tests will consist of mostly unit tests, a few integration tests, and even fewer end-to-end tests, because early in the pipeline speed is more important than comprehensiveness. When I commit my changes, I want the results fast enough so that I will wait for them - ready to fix any issue that might occur.&lt;/p&gt;
&lt;h3&gt;Regression testing&lt;/h3&gt;
&lt;p&gt;There are many definitions of regression testing, as you can read in &lt;a href="https://arborosa.org/2015/07/31/regression-testing/"&gt;Arborosa's blog post on the topic&lt;/a&gt;. I have always defined regression testing along the lines of "testing the parts that weren't impacted by a change to see if they really weren't impacted." (Which is really weird if you start thinking about it: something is regression testing depending on your knowledge of the system and the change.)&lt;/p&gt;
&lt;h3&gt;The tests in your pipeline are regression tests, …&lt;/h3&gt;
&lt;p&gt;Most of the tests that run in your pipeline are regression tests. Your commits are small and you have a lot of tests, so most of those will cover parts of the system that shouldn't have been impacted by your changes. So yes, regression tests.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2019/your-ci-cd-pipeline-does-not-run-regression-tests/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>ci/cd</category><category>devops</category><category>regression testing</category><category>semantics</category><category>test automation</category><guid>https://j19sch.github.io/blog/2019/your-ci-cd-pipeline-does-not-run-regression-tests/</guid><pubDate>Mon, 05 Aug 2019 21:47:51 GMT</pubDate></item><item><title>Test automation - five questions leading to five heuristics</title><link>https://j19sch.github.io/blog/2015/test-automation-five-questions-leading-to-five-heuristics/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;(I wrote a follow-up to this post in June 2019: &lt;a href="https://j19sch.github.io/blog/2019/how-this-tester-writes-code/"&gt;how this tester writes code&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;In 1984 Abelson and Sussman said in the Preface to '&lt;a href="https://mitpress.mit.edu/sicp/"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;':&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our design of this introductory computer-science subject reflects two major concerns. First, we want to establish the idea that a computer language is not just a way of getting a computer to perform operations but rather that it is a novel formal medium for expressing ideas about methodology. &lt;strong&gt;Thus, programs must be written for people to read, and only incidentally for machines to execute.&lt;/strong&gt; Second, we believe that the essential material to be addressed by a subject at this level is not the syntax of particular programming-language constructs, nor clever algorithms for computing particular functions efficiently, nor even the mathematical analysis of algorithms and the foundations of computing, but rather the techniques used to control the intellectual complexity of large software systems. [emphasis mine]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This oft-quoted sentence I emphasized, is even more true if the purpose of our programs is test automation&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://j19sch.github.io/blog/2015/test-automation-five-questions-leading-to-five-heuristics/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;. So let's say you run your test automation program and the result is a list of passes and fails.  The purpose of testing is to produce information. You could say that this list of results qualifies as information and I would disagree. I would say it is data, data in need of interpretation. When we attempt this interpretation, we should consider the following five questions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2015/test-automation-five-questions-leading-to-five-heuristics/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programming</category><category>test automation</category><category>testing and checking</category><guid>https://j19sch.github.io/blog/2015/test-automation-five-questions-leading-to-five-heuristics/</guid><pubDate>Tue, 24 Mar 2015 19:53:24 GMT</pubDate></item><item><title>Lessons learned in some test automation</title><link>https://j19sch.github.io/blog/2013/lessons-learned-in-some-test-automation/</link><dc:creator>Joep Schuurkes</dc:creator><description>&lt;div&gt;&lt;p&gt;In the past two weeks I built a test tool in VBA (Visual Basic for Applications). I did this, because two weeks ago my fellow tester showed me an important test we have to do at least once for each major release. The test consists of having the application generate three reports in Excel format. On two of these reports you apply a set of filters and take the sum of a few columns, rinse and repeat. Then you add several of those sums together and the results of those calculations should match the numbers in the third report. So basically, the point of the test is to check if the numbers in the three reports add up. And it's a lot of work, i.e. about two days.&lt;/p&gt;
&lt;p&gt;After being shown how to perform the test, the first thought that popped into my head, was: "Boring!" The second thought was: "It's automatable!" And since there was little else to do - delivery of the new test environments was delayed - I changed it from automatable to automated.&lt;/p&gt;
&lt;p&gt;So now, after two weeks, I have this tool in VBA. For each of the three reports it contains a sheet in which you define the sets of filters and sums. If you click a big button, the report is opened and the filters and sums are applied. There's also a fourth sheet to do the second set of calculations and to do the check if the numbers match. This last part is not done in VBA; it's all formulas in Excel.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://j19sch.github.io/blog/2013/lessons-learned-in-some-test-automation/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>programming</category><category>test automation</category><category>VBA</category><guid>https://j19sch.github.io/blog/2013/lessons-learned-in-some-test-automation/</guid><pubDate>Mon, 18 Feb 2013 20:46:02 GMT</pubDate></item></channel></rss>